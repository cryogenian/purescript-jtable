(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc version 0.6.9.5
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function numShl(n1) {
      return function(n2) {
        return n1 << n2;
      };
    }
    ;
    
    function numShr(n1) {
      return function(n2) {
        return n1 >> n2;
      };
    }
    ;
    
    function numZshr(n1) {
      return function(n2) {
        return n1 >>> n2;
      };
    }
    ;
    
    function numAnd(n1) {
      return function(n2) {
        return n1 & n2;
      };
    }
    ;
    
    function numOr(n1) {
      return function(n2) {
        return n1 | n2;
      };
    }
    ;
    
    function numXor(n1) {
      return function(n2) {
        return n1 ^ n2;
      };
    }
    ;
    
    function numComplement(n) {
      return ~n;
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var Bits = function ($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
        this[".&."] = $dot$amp$dot;
        this[".^."] = $dot$up$dot;
        this[".|."] = $dot$bar$dot;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $less$hash$greater = function (__dict_Functor_1) {
        return function (fa) {
            return function (f) {
                return $less$dollar$greater(__dict_Functor_1)(f)(fa);
            };
        };
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var $hash = function (x) {
        return function (f) {
            return f(x);
        };
    };
    var zero = function (dict) {
        return dict.zero;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var showNumber = new Show(showNumberImpl);
    var showBoolean = new Show(function (_113) {
        if (_113) {
            return "true";
        };
        if (!_113) {
            return "false";
        };
        throw new Error("Failed pattern match");
    });
    var show = function (dict) {
        return dict.show;
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupString = new Semigroup(concatString);
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var functorArr = new Functor($less$less$less(semigroupoidArr));
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqString = new Eq(refIneq, refEq);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var $$const = function (a) {
        return function (_110) {
            return a;
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _1241 = compare(__dict_Ord_12)(a1)(a2);
                if (_1241 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _1242 = compare(__dict_Ord_13)(a1)(a2);
                if (_1242 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _1243 = compare(__dict_Ord_14)(a1)(a2);
                if (_1243 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_15) {
        return function (a1) {
            return function (a2) {
                var _1244 = compare(__dict_Ord_15)(a1)(a2);
                if (_1244 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
    var applyArr = new Apply(function (f) {
        return function (g) {
            return function (x) {
                return f(x)(g(x));
            };
        };
    }, function () {
        return functorArr;
    });
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_12) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_11) {
                        return $$return(__dict_Monad_16)(_12(_11));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Bits: Bits, 
        Ord: Ord, 
        Eq: Eq, 
        Ring: Ring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "<>": $less$greater, 
        not: not, 
        "||": $bar$bar, 
        "&&": $amp$amp, 
        complement: complement, 
        ">=": $greater$eq, 
        "<=": $less$eq, 
        ">": $greater, 
        "<": $less, 
        compare: compare, 
        "/=": $div$eq, 
        "==": $eq$eq, 
        negate: negate, 
        "-": $minus, 
        zero: zero, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "<#>": $less$hash$greater, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "#": $hash, 
        "$": $dollar, 
        id: id, 
        ">>>": $greater$greater$greater, 
        "<<<": $less$less$less, 
        "const": $$const, 
        flip: flip, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        functorArr: functorArr, 
        applyArr: applyArr, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        eqString: eqString, 
        eqNumber: eqNumber, 
        ordNumber: ordNumber, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function unsafeIndex(xs) {
      return function(n) {
        return xs[n];
      };
    }
    ;
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.$$Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function max(n1){  return function(n2) {    return Math.max(n1, n2);  }};
    return {
        max: max
    };
})();
var PS = PS || {};
PS.Data_Profunctor = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Profunctor = function (dimap) {
        this.dimap = dimap;
    };
    var dimap = function (dict) {
        return dict.dimap;
    };
    return {
        Profunctor: Profunctor, 
        dimap: dimap
    };
})();
var PS = PS || {};
PS.Data_Void = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Functor_Contravariant = PS.Data_Functor_Contravariant;
    var Void = function (x) {
        return x;
    };
    var absurd = function (a) {
        var spin = function (__copy__260) {
            var _260 = __copy__260;
            tco: while (true) {
                var __tco__260 = _260;
                _260 = __tco__260;
                continue tco;
            };
        };
        return spin(a);
    };
    return {
        Void: Void, 
        absurd: absurd
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;
    
    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;
    
    function runFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    }
    ;
    
    function runFn7(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    return {
        runFn7: runFn7, 
        runFn4: runFn4, 
        runFn3: runFn3, 
        runFn2: runFn2
    };
})();
var PS = PS || {};
PS.Data_Exists = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function mkExists(fa) {  return fa;};
    function runExists(f) {  return function(fa) {    return f(fa);  };};
    return {
        runExists: runExists, 
        mkExists: mkExists
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    
    function runPure(f) {
      return f();
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        runPure: runPure, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Exception = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function message(e) {
    return e.message;
  }
  ;
    return {
        message: message
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Ref = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function newRef(val) {
    return function () {
      return { value: val };
    };
  }
;
    
  function readRef(ref) {
    return function() {
      return ref.value;
    };
  }
;
    
  function writeRef(ref) {
    return function(val) {
      return function() {
        ref.value = val;
        return {};
      };
    };
  }
;
    return {
        writeRef: writeRef, 
        readRef: readRef, 
        newRef: newRef
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function unsafeInterleaveEff(f) {
      return f;
    }
    ;
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
    return {
        trace: trace
    };
})();
var PS = PS || {};
PS.Data_Lazy = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Extend = PS.Control_Extend;
    var Control_Comonad = PS.Control_Comonad;
    function defer(thunk) {    if (this instanceof defer) {      this.thunk = thunk;      return this;    } else {      return new defer(thunk);    }}defer.prototype.force = function () {    var value = this.thunk();    delete this.thunk;    this.force = function () {        return value;    };    return value;};;
    function force(l) {  return l.force();};
    var functorLazy = new Prelude.Functor(function (f) {
        return function (l) {
            return defer(function (_289) {
                return f(force(l));
            });
        };
    });
    return {
        force: force, 
        defer: defer, 
        functorLazy: functorLazy
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $times$greater = function (__dict_Apply_76) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_76)(Prelude["<$>"](__dict_Apply_76["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    return {
        "*>": $times$greater
    };
})();
var PS = PS || {};
PS.Control_Alt = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Alt = function ($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
        this["<|>"] = $less$bar$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$bar$greater = function (dict) {
        return dict["<|>"];
    };
    return {
        Alt: Alt, 
        "<|>": $less$bar$greater
    };
})();
var PS = PS || {};
PS.Control_Plus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
        this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
        this.empty = empty;
    };
    var empty = function (dict) {
        return dict.empty;
    };
    return {
        Plus: Plus, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Control_Alternative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
        this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    };
    return {
        Alternative: Alternative
    };
})();
var PS = PS || {};
PS.Control_MonadPlus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
        this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    };
    var guard = function (__dict_MonadPlus_85) {
        return function (_302) {
            if (_302) {
                return Prelude["return"](__dict_MonadPlus_85["__superclass_Prelude.Monad_0"]())(Prelude.unit);
            };
            if (!_302) {
                return Control_Plus.empty((__dict_MonadPlus_85["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
            };
            throw new Error("Failed pattern match");
        };
    };
    return {
        MonadPlus: MonadPlus, 
        guard: guard
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Extend = PS.Control_Extend;
    var Left = (function () {
        function Left(value0) {
            this.value0 = value0;
        };
        Left.create = function (value0) {
            return new Left(value0);
        };
        return Left;
    })();
    var Right = (function () {
        function Right(value0) {
            this.value0 = value0;
        };
        Right.create = function (value0) {
            return new Right(value0);
        };
        return Right;
    })();
    var functorEither = new Prelude.Functor(function (f) {
        return function (_306) {
            if (_306 instanceof Left) {
                return new Left(_306.value0);
            };
            if (_306 instanceof Right) {
                return new Right(f(_306.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    var either = function (f) {
        return function (g) {
            return function (_305) {
                if (_305 instanceof Left) {
                    return f(_305.value0);
                };
                if (_305 instanceof Right) {
                    return g(_305.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var applyEither = new Prelude.Apply(function (_307) {
        return function (r) {
            if (_307 instanceof Left) {
                return new Left(_307.value0);
            };
            if (_307 instanceof Right) {
                return Prelude["<$>"](functorEither)(_307.value0)(r);
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorEither;
    });
    var bindEither = new Prelude.Bind(either(function (e) {
        return function (_304) {
            return new Left(e);
        };
    })(function (a) {
        return function (f) {
            return f(a);
        };
    }), function () {
        return applyEither;
    });
    var applicativeEither = new Prelude.Applicative(function () {
        return applyEither;
    }, Right.create);
    return {
        Left: Left, 
        Right: Right, 
        either: either, 
        functorEither: functorEither, 
        applyEither: applyEither, 
        applicativeEither: applicativeEither, 
        bindEither: bindEither
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    var maybe = function (b) {
        return function (f) {
            return function (_322) {
                if (_322 instanceof Nothing) {
                    return b;
                };
                if (_322 instanceof Just) {
                    return f(_322.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var functorMaybe = new Prelude.Functor(function (fn) {
        return function (_323) {
            if (_323 instanceof Just) {
                return new Just(fn(_323.value0));
            };
            return Nothing.value;
        };
    });
    var fromMaybe = function (a) {
        return maybe(a)(Prelude.id(Prelude.categoryArr));
    };
    var applyMaybe = new Prelude.Apply(function (_324) {
        return function (x) {
            if (_324 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_324.value0)(x);
            };
            if (_324 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    var bindMaybe = new Prelude.Bind(function (_326) {
        return function (k) {
            if (_326 instanceof Just) {
                return k(_326.value0);
            };
            if (_326 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    var applicativeMaybe = new Prelude.Applicative(function () {
        return applyMaybe;
    }, Just.create);
    var monadMaybe = new Prelude.Monad(function () {
        return applicativeMaybe;
    }, function () {
        return bindMaybe;
    });
    var altMaybe = new Control_Alt.Alt(function (_325) {
        return function (r) {
            if (_325 instanceof Nothing) {
                return r;
            };
            return _325;
        };
    }, function () {
        return functorMaybe;
    });
    var plusMaybe = new Control_Plus.Plus(function () {
        return altMaybe;
    }, Nothing.value);
    var alternativeMaybe = new Control_Alternative.Alternative(function () {
        return plusMaybe;
    }, function () {
        return applicativeMaybe;
    });
    var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
        return alternativeMaybe;
    }, function () {
        return monadMaybe;
    });
    return {
        Nothing: Nothing, 
        Just: Just, 
        fromMaybe: fromMaybe, 
        maybe: maybe, 
        functorMaybe: functorMaybe, 
        applyMaybe: applyMaybe, 
        applicativeMaybe: applicativeMaybe, 
        altMaybe: altMaybe, 
        plusMaybe: plusMaybe, 
        alternativeMaybe: alternativeMaybe, 
        bindMaybe: bindMaybe, 
        monadMaybe: monadMaybe, 
        monadPlusMaybe: monadPlusMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
    function length (xs) {  return xs.length;};
    function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
    function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
    function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
    var $dot$dot = range;
    var $bang$bang = function (xs) {
        return function (n) {
            var isInt = function (n_1) {
                return n_1 !== ~~n_1;
            };
            var _1279 = n < 0 || (n >= length(xs) || isInt(n));
            if (_1279) {
                return Data_Maybe.Nothing.value;
            };
            if (!_1279) {
                return new Data_Maybe.Just(xs[n]);
            };
            throw new Error("Failed pattern match");
        };
    };
    var sortBy = function (comp) {
        return function (xs) {
            var comp$prime = function (x) {
                return function (y) {
                    var _1280 = comp(x)(y);
                    if (_1280 instanceof Prelude.GT) {
                        return 1;
                    };
                    if (_1280 instanceof Prelude.EQ) {
                        return 0;
                    };
                    if (_1280 instanceof Prelude.LT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return sortJS(comp$prime)(xs);
        };
    };
    var singleton = function (a) {
        return [ a ];
    };
    var semigroupArray = new Prelude.Semigroup(append);
    var $$null = function (_337) {
        if (_337.length === 0) {
            return true;
        };
        return false;
    };
    var nubBy = function ($eq$eq) {
        return function (_341) {
            if (_341.length === 0) {
                return [  ];
            };
            if (_341.length >= 1) {
                var _1285 = _341.slice(1);
                return Prelude[":"](_341[0])(nubBy($eq$eq)(filter(function (y) {
                    return !$eq$eq(_341[0])(y);
                })(_1285)));
            };
            throw new Error("Failed pattern match");
        };
    };
    var nub = function (__dict_Eq_111) {
        return nubBy(Prelude["=="](__dict_Eq_111));
    };
    var head = function (xs) {
        return $bang$bang(xs)(0);
    };
    var functorArray = new Prelude.Functor(map);
    var monadArray = new Prelude.Monad(function () {
        return applicativeArray;
    }, function () {
        return bindArray;
    });
    var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
        return applyArray;
    });
    var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
        return functorArray;
    });
    var applicativeArray = new Prelude.Applicative(function () {
        return applyArray;
    }, singleton);
    return {
        sortBy: sortBy, 
        nubBy: nubBy, 
        nub: nub, 
        zipWith: zipWith, 
        range: range, 
        filter: filter, 
        concatMap: concatMap, 
        updateAt: updateAt, 
        concat: concat, 
        append: append, 
        findIndex: findIndex, 
        length: length, 
        map: map, 
        "null": $$null, 
        head: head, 
        singleton: singleton, 
        snoc: snoc, 
        "..": $dot$dot, 
        "!!": $bang$bang, 
        functorArray: functorArray, 
        applyArray: applyArray, 
        applicativeArray: applicativeArray, 
        bindArray: bindArray, 
        monadArray: monadArray, 
        semigroupArray: semigroupArray
    };
})();
var PS = PS || {};
PS.Data_Foreign = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var Data_Array = PS.Data_Array;
    var Data_Either = PS.Data_Either;
    
  function toForeign(value) {
    return value;
  }
  ;
    
  function unsafeFromForeign(value) {
    return value;
  }
  ;
    
  function typeOf(value) {
    return typeof value;
  }
  ;
    
  function tagOf(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  }
  ;
    
  function isNull(value) {
    return value === null;
  }
  ;
    
  function isUndefined(value) {
    return value === undefined;
  }
  ;
    var TypeMismatch = (function () {
        function TypeMismatch(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        TypeMismatch.create = function (value0) {
            return function (value1) {
                return new TypeMismatch(value0, value1);
            };
        };
        return TypeMismatch;
    })();
    var ErrorAtProperty = (function () {
        function ErrorAtProperty(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        ErrorAtProperty.create = function (value0) {
            return function (value1) {
                return new ErrorAtProperty(value0, value1);
            };
        };
        return ErrorAtProperty;
    })();
    var unsafeReadTagged = function (tag) {
        return function (value) {
            if (tagOf(value) === tag) {
                return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(value));
            };
            return new Data_Either.Left(new TypeMismatch(tag, tagOf(value)));
        };
    };
    var readString = unsafeReadTagged("String");
    return {
        TypeMismatch: TypeMismatch, 
        ErrorAtProperty: ErrorAtProperty, 
        readString: readString, 
        isUndefined: isUndefined, 
        isNull: isNull, 
        tagOf: tagOf, 
        typeOf: typeOf, 
        unsafeReadTagged: unsafeReadTagged, 
        unsafeFromForeign: unsafeFromForeign, 
        toForeign: toForeign
    };
})();
var PS = PS || {};
PS.Data_Foreign_Index = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Foreign = PS.Data_Foreign;
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    
  function unsafeReadPropImpl(f, s, key, value) {
    return value == null ? f : s(value[key]);
  }
  ;
    
  function unsafeHasOwnProperty(prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  }
  ;
    
  function unsafeHasProperty(prop, value) {
    return prop in value;
  }
  ;
    var Index = function ($bang, errorAt, hasOwnProperty, hasProperty) {
        this["!"] = $bang;
        this.errorAt = errorAt;
        this.hasOwnProperty = hasOwnProperty;
        this.hasProperty = hasProperty;
    };
    var $bang = function (dict) {
        return dict["!"];
    };
    var unsafeReadProp = function (k) {
        return function (value) {
            return unsafeReadPropImpl(new Data_Either.Left(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Prelude.pure(Data_Either.applicativeEither), k, value);
        };
    };
    var prop = unsafeReadProp;
    var hasPropertyImpl = function (prop_1) {
        return function (value) {
            if (Data_Foreign.isNull(value)) {
                return false;
            };
            if (Data_Foreign.isUndefined(value)) {
                return false;
            };
            if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
                return unsafeHasProperty(prop_1, value);
            };
            return false;
        };
    };
    var hasOwnPropertyImpl = function (prop_1) {
        return function (value) {
            if (Data_Foreign.isNull(value)) {
                return false;
            };
            if (Data_Foreign.isUndefined(value)) {
                return false;
            };
            if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
                return unsafeHasOwnProperty(prop_1, value);
            };
            return false;
        };
    };
    var indexString = new Index(Prelude.flip(prop), Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl);
    var errorAt = function (dict) {
        return dict.errorAt;
    };
    return {
        Index: Index, 
        errorAt: errorAt, 
        "!": $bang, 
        prop: prop, 
        indexString: indexString
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidArray: monoidArray
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    var zip = Data_Array.zipWith(Tuple.create);
    var uncurry = function (f) {
        return function (_444) {
            return f(_444.value0)(_444.value1);
        };
    };
    var snd = function (_443) {
        return _443.value1;
    };
    return {
        Tuple: Tuple, 
        zip: zip, 
        uncurry: uncurry, 
        snd: snd
    };
})();
var PS = PS || {};
PS.Control_Monad_Writer_Trans = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var WriterT = function (x) {
        return x;
    };
    var runWriterT = function (_500) {
        return _500;
    };
    var mapWriterT = function (f) {
        return function (m) {
            return WriterT(f(runWriterT(m)));
        };
    };
    var functorWriterT = function (__dict_Functor_271) {
        return new Prelude.Functor(function (f) {
            return mapWriterT(Prelude["<$>"](__dict_Functor_271)(function (_499) {
                return new Data_Tuple.Tuple(f(_499.value0), _499.value1);
            }));
        });
    };
    var applyWriterT = function (__dict_Monoid_275) {
        return function (__dict_Apply_276) {
            return new Prelude.Apply(function (f) {
                return function (v) {
                    return WriterT((function () {
                        var k = function (_501) {
                            return function (_502) {
                                return new Data_Tuple.Tuple(_501.value0(_502.value0), Prelude["<>"](__dict_Monoid_275["__superclass_Prelude.Semigroup_0"]())(_501.value1)(_502.value1));
                            };
                        };
                        return Prelude["<*>"](__dict_Apply_276)(Prelude["<$>"](__dict_Apply_276["__superclass_Prelude.Functor_0"]())(k)(runWriterT(f)))(runWriterT(v));
                    })());
                };
            }, function () {
                return functorWriterT(__dict_Apply_276["__superclass_Prelude.Functor_0"]());
            });
        };
    };
    var applicativeWriterT = function (__dict_Monoid_277) {
        return function (__dict_Applicative_278) {
            return new Prelude.Applicative(function () {
                return applyWriterT(__dict_Monoid_277)(__dict_Applicative_278["__superclass_Prelude.Apply_0"]());
            }, function (a) {
                return WriterT(Prelude.pure(__dict_Applicative_278)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(__dict_Monoid_277))));
            });
        };
    };
    return {
        WriterT: WriterT, 
        mapWriterT: mapWriterT, 
        runWriterT: runWriterT, 
        functorWriterT: functorWriterT, 
        applyWriterT: applyWriterT, 
        applicativeWriterT: applicativeWriterT
    };
})();
var PS = PS || {};
PS.Control_Monad_Aff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Either = PS.Data_Either;
    var Control_Monad_Error_Class = PS.Control_Monad_Error_Class;
    var Control_Monad_Eff_Exception = PS.Control_Monad_Eff_Exception;
    var Control_Apply = PS.Control_Apply;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Eff_Unsafe = PS.Control_Monad_Eff_Unsafe;
    var Control_Monad_Eff_Class = PS.Control_Monad_Eff_Class;
    
    function _pure(canceler, v) {
      return function(success, error) {
        try {
          success(v);
        } catch (e) {
          error(e);
        }

        return canceler;
      }
    };
    
    function _fmap(f, aff) {
      return function(success, error) {
        return aff(function(v) {
          try {
            success(f(v));
          } catch (e) {
            error(e);
          }
        }, error);
      };
    };
    
    function _bind(aff, f) {
      return function(success, error) {
        var canceler;

        canceler = aff(function(v) {
          try {
            canceler = f(v)(success, error);
          } catch (e) {
            error(e);
          }
        }, error);

        return function(e) {
          return function(success, error) {
            return canceler(e)(success, error);
          }
        };
      };
    };
    
    function _runAff(errorT, successT, aff) {
      return function() {
        return aff(function(v) {
          try {
            successT(v)();
          } catch (e) {
            errorT(e)();
          }
        }, function(e) {
          errorT(e)();
        });
      };
    };
    var runAff = function (ex) {
        return function (f) {
            return function (aff) {
                return _runAff(ex, f, aff);
            };
        };
    };
    var functorAff = new Prelude.Functor(function (f) {
        return function (fa) {
            return _fmap(f, fa);
        };
    });
    var applyAff = new Prelude.Apply(function (ff) {
        return function (fa) {
            return _bind(ff, function (f) {
                return Prelude["<$>"](functorAff)(f)(fa);
            });
        };
    }, function () {
        return functorAff;
    });
    var bindAff = new Prelude.Bind(function (fa) {
        return function (f) {
            return _bind(fa, f);
        };
    }, function () {
        return applyAff;
    });
    var applicativeAff = new Prelude.Applicative(function () {
        return applyAff;
    }, function (v) {
        return _pure(nonCanceler, v);
    });
    var nonCanceler = Prelude["const"](Prelude.pure(applicativeAff)(false));
    var monadAff = new Prelude.Monad(function () {
        return applicativeAff;
    }, function () {
        return bindAff;
    });
    return {
        runAff: runAff, 
        nonCanceler: nonCanceler, 
        functorAff: functorAff, 
        applyAff: applyAff, 
        applicativeAff: applicativeAff, 
        bindAff: bindAff, 
        monadAff: monadAff
    };
})();
var PS = PS || {};
PS.Halogen_Signal = (function () {
    "use strict";
    var Data_Tuple = PS.Data_Tuple;
    var Prelude = PS.Prelude;
    var Data_Profunctor = PS.Data_Profunctor;
    var Data_Profunctor_Strong = PS.Data_Profunctor_Strong;
    var Data_Profunctor_Choice = PS.Data_Profunctor_Choice;
    var Data_Either = PS.Data_Either;
    var SF = function (x) {
        return x;
    };
    var SF1 = function (x) {
        return x;
    };
    var tail = function (_564) {
        return _564.next;
    };
    var stateful$prime = function (s) {
        return function (step) {
            var go = function (s_1) {
                return function (i) {
                    var _1310 = step(s_1)(i);
                    return {
                        result: _1310.value0, 
                        next: go(_1310.value1)
                    };
                };
            };
            return go(s);
        };
    };
    var startingAt = function (s) {
        return function (o) {
            return {
                result: o, 
                next: s
            };
        };
    };
    var runSF = function (_561) {
        return _561;
    };
    var profunctorSF1 = new Data_Profunctor.Profunctor(function (f) {
        return function (g) {
            return function (_570) {
                return {
                    result: g(_570.result), 
                    next: Data_Profunctor.dimap(profunctorSF)(f)(g)(_570.next)
                };
            };
        };
    });
    var profunctorSF = new Data_Profunctor.Profunctor(function (f) {
        return function (g) {
            return function (_569) {
                return function (i) {
                    return Data_Profunctor.dimap(profunctorSF1)(f)(g)(_569(f(i)));
                };
            };
        };
    });
    var input = function (i) {
        return {
            result: i, 
            next: input
        };
    };
    var head = function (_563) {
        return _563.result;
    };
    var semigroupoidSF1 = new Prelude.Semigroupoid(function (f) {
        return function (g) {
            return {
                result: head(f), 
                next: Prelude["<<<"](semigroupoidSF)(tail(f))(tail(g))
            };
        };
    });
    var semigroupoidSF = new Prelude.Semigroupoid(function (f) {
        return function (g) {
            return function (i) {
                var s1 = runSF(g)(i);
                var s2 = runSF(f)(head(s1));
                return Prelude["<<<"](semigroupoidSF1)(s2)(s1);
            };
        };
    });
    var functorSF1 = new Prelude.Functor(function (f) {
        return function (_566) {
            return {
                result: f(_566.result), 
                next: Prelude["<$>"](functorSF)(f)(_566.next)
            };
        };
    });
    var functorSF = new Prelude.Functor(function (f) {
        return function (_565) {
            return function (i) {
                return Prelude["<$>"](functorSF1)(f)(_565(i));
            };
        };
    });
    var differencesWith = function (f) {
        return function (initial) {
            return stateful$prime(initial)(function (last) {
                return function (next) {
                    var d = f(last)(next);
                    return new Data_Tuple.Tuple(d, next);
                };
            });
        };
    };
    return {
        tail: tail, 
        head: head, 
        startingAt: startingAt, 
        differencesWith: differencesWith, 
        "stateful'": stateful$prime, 
        input: input, 
        runSF: runSF, 
        functorSF: functorSF, 
        functorSF1: functorSF1, 
        profunctorSF: profunctorSF, 
        profunctorSF1: profunctorSF1, 
        semigroupoidSF: semigroupoidSF, 
        semigroupoidSF1: semigroupoidSF1
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Data_Tuple = PS.Data_Tuple;
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
    var Foldable = function (foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var traverse_ = function (__dict_Applicative_378) {
        return function (__dict_Foldable_379) {
            return function (f) {
                return foldr(__dict_Foldable_379)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_378["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_378)(Prelude.unit));
            };
        };
    };
    var for_ = function (__dict_Applicative_380) {
        return function (__dict_Foldable_381) {
            return Prelude.flip(traverse_(__dict_Applicative_380)(__dict_Foldable_381));
        };
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var or = function (__dict_Foldable_388) {
        return foldl(__dict_Foldable_388)(Prelude["||"](Prelude.boolLikeBoolean))(false);
    };
    var foldableArray = new Foldable(function (__dict_Monoid_396) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_396["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_396))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    var any = function (__dict_Foldable_405) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_405)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    var elem = function (__dict_Eq_406) {
        return function (__dict_Foldable_407) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_407))(Prelude["=="](__dict_Eq_406));
        };
    };
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        elem: elem, 
        any: any, 
        or: or, 
        for_: for_, 
        traverse_: traverse_, 
        foldMap: foldMap, 
        foldl: foldl, 
        foldr: foldr, 
        foldableArray: foldableArray
    };
})();
var PS = PS || {};
PS.Data_StrMap_ST = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Data_Maybe = PS.Data_Maybe;
    
  function _new() {
    return {};
  }
  ;
    
  function poke(m) {
    return function(k) {
      return function(v) {
        return function() {
          m[k] = v;
          return m;
        };
      };
    };
  }
  ;
    var $$new = _new;
    return {
        poke: poke, 
        "new": $$new
    };
})();
var PS = PS || {};
PS.Data_String = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Char = PS.Data_Char;
    var Prelude = PS.Prelude;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Data_Maybe = PS.Data_Maybe;
    
    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
    return {
        joinWith: joinWith
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = new Traversable(function () {
        return Data_Foldable.foldableArray;
    }, function () {
        return Data_Array.functorArray;
    }, function (__dict_Applicative_428) {
        return function (_626) {
            if (_626.length === 0) {
                return Prelude.pure(__dict_Applicative_428)([  ]);
            };
            if (_626.length >= 1) {
                var _1327 = _626.slice(1);
                return Prelude["<*>"](__dict_Applicative_428["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_428["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_626[0]))(sequence(traversableArray)(__dict_Applicative_428)(_1327));
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_427) {
        return function (f) {
            return function (_625) {
                if (_625.length === 0) {
                    return Prelude.pure(__dict_Applicative_427)([  ]);
                };
                if (_625.length >= 1) {
                    var _1331 = _625.slice(1);
                    return Prelude["<*>"](__dict_Applicative_427["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_427["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(f(_625[0])))(traverse(traversableArray)(__dict_Applicative_427)(f)(_1331));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var $$for = function (__dict_Applicative_438) {
        return function (__dict_Traversable_439) {
            return function (x) {
                return function (f) {
                    return traverse(__dict_Traversable_439)(__dict_Applicative_438)(f)(x);
                };
            };
        };
    };
    return {
        Traversable: Traversable, 
        "for": $$for, 
        sequence: sequence, 
        traverse: traverse, 
        traversableArray: traversableArray
    };
})();
var PS = PS || {};
PS.Data_Bifunctor = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Const = PS.Data_Const;
    var Data_Either = PS.Data_Either;
    var Data_Tuple = PS.Data_Tuple;
    var Bifunctor = function (bimap) {
        this.bimap = bimap;
    };
    var bimap = function (dict) {
        return dict.bimap;
    };
    var rmap = function (__dict_Bifunctor_465) {
        return bimap(__dict_Bifunctor_465)(Prelude.id(Prelude.categoryArr));
    };
    return {
        Bifunctor: Bifunctor, 
        rmap: rmap, 
        bimap: bimap
    };
})();
var PS = PS || {};
PS.Data_Foreign_Class = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foreign = PS.Data_Foreign;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Data_Foreign_Null = PS.Data_Foreign_Null;
    var Data_Foreign_Undefined = PS.Data_Foreign_Undefined;
    var Data_Foreign_NullOrUndefined = PS.Data_Foreign_NullOrUndefined;
    var Data_Either = PS.Data_Either;
    var Data_Foreign_Index = PS.Data_Foreign_Index;
    var IsForeign = function (read) {
        this.read = read;
    };
    var stringIsForeign = new IsForeign(Data_Foreign.readString);
    var read = function (dict) {
        return dict.read;
    };
    var readWith = function (__dict_IsForeign_553) {
        return function (f) {
            return function (value) {
                return Data_Either.either(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Either.Left.create)(f))(Data_Either.Right.create)(read(__dict_IsForeign_553)(value));
            };
        };
    };
    var readProp = function (__dict_IsForeign_554) {
        return function (__dict_Index_555) {
            return function (prop) {
                return function (value) {
                    return Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Index["!"](__dict_Index_555)(value)(prop))(readWith(__dict_IsForeign_554)(Data_Foreign_Index.errorAt(__dict_Index_555)(prop)));
                };
            };
        };
    };
    return {
        IsForeign: IsForeign, 
        readProp: readProp, 
        readWith: readWith, 
        read: read, 
        stringIsForeign: stringIsForeign
    };
})();
var PS = PS || {};
PS.Data_Identity = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Traversable = PS.Data_Traversable;
    var Identity = function (x) {
        return x;
    };
    var runIdentity = function (_748) {
        return _748;
    };
    var functorIdentity = new Prelude.Functor(function (f) {
        return function (_754) {
            return f(_754);
        };
    });
    var applyIdentity = new Prelude.Apply(function (_755) {
        return function (_756) {
            return _755(_756);
        };
    }, function () {
        return functorIdentity;
    });
    var applicativeIdentity = new Prelude.Applicative(function () {
        return applyIdentity;
    }, Identity);
    return {
        Identity: Identity, 
        runIdentity: runIdentity, 
        functorIdentity: functorIdentity, 
        applyIdentity: applyIdentity, 
        applicativeIdentity: applicativeIdentity
    };
})();
var PS = PS || {};
PS.Control_Monad_Writer = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Identity = PS.Data_Identity;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Monoid = PS.Data_Monoid;
    var runWriter = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Identity.runIdentity)(Control_Monad_Writer_Trans.runWriterT);
    return {
        runWriter: runWriter
    };
})();
var PS = PS || {};
PS.Data_StrMap = (function () {
    "use strict";
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_StrMap_ST = PS.Data_StrMap_ST;
    var Data_Monoid_All = PS.Data_Monoid_All;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Data_Array = PS.Data_Array;
    
  function runST(f) {
    return f;
  }
  ;
    
  function all(f) {
    return function(m) {
      for (var k in m) {
        if (!f(k)(m[k])) return false;
      }
      return true;
    };
  }
  ;
    
  function _lookup(no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  }
  ;
    
  function _collect(f) {
    return function(m) {
      var r = [];
      for (var k in m) {
        r.push(f(k)(m[k]));
      }
      return r;
    };
  }
  ;
    
  var keys = Object.keys || _collect(function(k) {
    return function() { return k; };
  });
  ;
    var toList = _collect(Data_Tuple.Tuple.create);
    var pureST = function (f) {
        return Control_Monad_Eff.runPure(runST(f));
    };
    var lookup = Data_Function.runFn4(_lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
    var isEmpty = all(function (_821) {
        return function (_820) {
            return false;
        };
    });
    var fromList = function (l) {
        return pureST(function __do() {
            var _53 = Data_StrMap_ST["new"]();
            Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(l)(function (_822) {
                return Data_StrMap_ST.poke(_53)(_822.value0)(_822.value1);
            })();
            return _53;
        });
    };
    return {
        runST: runST, 
        all: all, 
        keys: keys, 
        fromList: fromList, 
        toList: toList, 
        lookup: lookup, 
        isEmpty: isEmpty
    };
})();
var PS = PS || {};
PS.Control_Monad_ListT = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Lazy = PS.Data_Lazy;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Unfoldable = PS.Data_Unfoldable;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Monad = PS.Control_Monad;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Yield = (function () {
        function Yield(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Yield.create = function (value0) {
            return function (value1) {
                return new Yield(value0, value1);
            };
        };
        return Yield;
    })();
    var Skip = (function () {
        function Skip(value0) {
            this.value0 = value0;
        };
        Skip.create = function (value0) {
            return new Skip(value0);
        };
        return Skip;
    })();
    var Done = (function () {
        function Done() {

        };
        Done.value = new Done();
        return Done;
    })();
    var ListT = (function () {
        function ListT(value0) {
            this.value0 = value0;
        };
        ListT.create = function (value0) {
            return new ListT(value0);
        };
        return ListT;
    })();
    var wrapEffect = function (__dict_Monad_804) {
        return function (v) {
            return ListT.create(Prelude["<$>"](((__dict_Monad_804["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["<<<"](Prelude.semigroupoidArr)(Skip.create)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Lazy.defer)(Prelude["const"])))(v));
        };
    };
    var runListT = function (_865) {
        return _865.value0;
    };
    var stepMap = function (__dict_Functor_807) {
        return function (f) {
            return function (l) {
                return ListT.create(Prelude["<$>"](__dict_Functor_807)(f)(runListT(l)));
            };
        };
    };
    var uncons = function (__dict_Monad_809) {
        return function (l) {
            var g = function (_877) {
                if (_877 instanceof Yield) {
                    return Prelude.pure(__dict_Monad_809["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Just.create(new Data_Tuple.Tuple(_877.value0, Data_Lazy.force(_877.value1))));
                };
                if (_877 instanceof Skip) {
                    return uncons(__dict_Monad_809)(Data_Lazy.force(_877.value0));
                };
                if (_877 instanceof Done) {
                    return Prelude.pure(__dict_Monad_809["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Nothing.value);
                };
                throw new Error("Failed pattern match");
            };
            return Prelude[">>="](__dict_Monad_809["__superclass_Prelude.Bind_1"]())(runListT(l))(g);
        };
    };
    var prepend$prime = function (__dict_Applicative_811) {
        return function (h) {
            return function (t) {
                return ListT.create(Prelude.pure(__dict_Applicative_811)(new Yield(h, t)));
            };
        };
    };
    var prepend = function (__dict_Applicative_812) {
        return function (h) {
            return function (t) {
                return prepend$prime(__dict_Applicative_812)(h)(Data_Lazy.defer(Prelude["const"](t)));
            };
        };
    };
    var nil = function (__dict_Applicative_813) {
        return ListT.create(Prelude.pure(__dict_Applicative_813)(Done.value));
    };
    var singleton = function (__dict_Applicative_815) {
        return function (a) {
            return prepend(__dict_Applicative_815)(a)(nil(__dict_Applicative_815));
        };
    };
    var zipWith$prime = function (__dict_Monad_817) {
        return function (f) {
            var loop = function (fa) {
                return function (fb) {
                    var g = function (_882) {
                        return function (_883) {
                            if (_883 instanceof Data_Maybe.Nothing) {
                                return Prelude.pure(__dict_Monad_817["__superclass_Prelude.Applicative_0"]())(nil(__dict_Monad_817["__superclass_Prelude.Applicative_0"]()));
                            };
                            if (_882 instanceof Data_Maybe.Nothing) {
                                return Prelude.pure(__dict_Monad_817["__superclass_Prelude.Applicative_0"]())(nil(__dict_Monad_817["__superclass_Prelude.Applicative_0"]()));
                            };
                            if (_882 instanceof Data_Maybe.Just && _883 instanceof Data_Maybe.Just) {
                                return Prelude["<$>"](((__dict_Monad_817["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.flip(prepend$prime(__dict_Monad_817["__superclass_Prelude.Applicative_0"]()))(Data_Lazy.defer(function (_863) {
                                    return zipWith$prime(__dict_Monad_817)(f)(_882.value0.value1)(_883.value0.value1);
                                })))(f(_882.value0.value0)(_883.value0.value0));
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                    return wrapEffect(__dict_Monad_817)(Prelude[">>="](__dict_Monad_817["__superclass_Prelude.Bind_1"]())(uncons(__dict_Monad_817)(fa))(function (_59) {
                        return Prelude[">>="](__dict_Monad_817["__superclass_Prelude.Bind_1"]())(uncons(__dict_Monad_817)(fb))(function (_58) {
                            return g(_59)(_58);
                        });
                    }));
                };
            };
            return loop;
        };
    };
    var zipWith = function (__dict_Monad_818) {
        return function (f) {
            var g = function (a) {
                return function (b) {
                    return Prelude.pure(__dict_Monad_818["__superclass_Prelude.Applicative_0"]())(f(a)(b));
                };
            };
            return zipWith$prime(__dict_Monad_818)(g);
        };
    };
    var functorListT = function (__dict_Functor_826) {
        return new Prelude.Functor(function (f) {
            var g = function (_884) {
                if (_884 instanceof Yield) {
                    return new Yield(f(_884.value0), Prelude["<$>"](Data_Lazy.functorLazy)(Prelude["<$>"](functorListT(__dict_Functor_826))(f))(_884.value1));
                };
                if (_884 instanceof Skip) {
                    return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(Prelude["<$>"](functorListT(__dict_Functor_826))(f))(_884.value0));
                };
                if (_884 instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match");
            };
            return stepMap(__dict_Functor_826)(g);
        });
    };
    var semigroupListT = function (__dict_Applicative_839) {
        return new Prelude.Semigroup(concat(__dict_Applicative_839));
    };
    var concat = function (__dict_Applicative_838) {
        return function (x) {
            return function (y) {
                var f = function (_869) {
                    if (_869 instanceof Yield) {
                        return new Yield(_869.value0, Prelude["<$>"](Data_Lazy.functorLazy)(Prelude.flip(Prelude["<>"](semigroupListT(__dict_Applicative_838)))(y))(_869.value1));
                    };
                    if (_869 instanceof Skip) {
                        return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(Prelude.flip(Prelude["<>"](semigroupListT(__dict_Applicative_838)))(y))(_869.value0));
                    };
                    if (_869 instanceof Done) {
                        return new Skip(Data_Lazy.defer(Prelude["const"](y)));
                    };
                    throw new Error("Failed pattern match");
                };
                return stepMap((__dict_Applicative_838["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(x);
            };
        };
    };
    var applyListT = function (__dict_Monad_842) {
        return new Prelude.Apply((function () {
            var g = function (f) {
                return function (x) {
                    return f(x);
                };
            };
            return zipWith(__dict_Monad_842)(g);
        })(), function () {
            return functorListT(((__dict_Monad_842["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
        });
    };
    var applicativeListT = function (__dict_Monad_843) {
        return new Prelude.Applicative(function () {
            return applyListT(__dict_Monad_843);
        }, singleton(__dict_Monad_843["__superclass_Prelude.Applicative_0"]()));
    };
    var altListT = function (__dict_Applicative_845) {
        return new Control_Alt.Alt(concat(__dict_Applicative_845), function () {
            return functorListT((__dict_Applicative_845["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
        });
    };
    var plusListT = function (__dict_Monad_814) {
        return new Control_Plus.Plus(function () {
            return altListT(__dict_Monad_814["__superclass_Prelude.Applicative_0"]());
        }, nil(__dict_Monad_814["__superclass_Prelude.Applicative_0"]()));
    };
    return {
        "zipWith'": zipWith$prime, 
        zipWith: zipWith, 
        wrapEffect: wrapEffect, 
        uncons: uncons, 
        singleton: singleton, 
        "prepend'": prepend$prime, 
        prepend: prepend, 
        nil: nil, 
        semigroupListT: semigroupListT, 
        functorListT: functorListT, 
        applyListT: applyListT, 
        applicativeListT: applicativeListT, 
        altListT: altListT, 
        plusListT: plusListT
    };
})();
var PS = PS || {};
PS.Halogen_HTML_Events_Handler = (function () {
    "use strict";
    var Control_Monad_Writer_Class = PS.Control_Monad_Writer_Class;
    var Prelude = PS.Prelude;
    var Control_Monad_Writer = PS.Control_Monad_Writer;
    var Control_Apply = PS.Control_Apply;
    var Data_Foldable = PS.Data_Foldable;
    var DOM = PS.DOM;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Array = PS.Data_Array;
    var Control_Plus = PS.Control_Plus;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Halogen_HTML_Events_Types = PS.Halogen_HTML_Events_Types;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Identity = PS.Data_Identity;
    function preventDefaultImpl(e) {  return function() {    e.preventDefault();  };};
    function stopPropagationImpl(e) {  return function() {    e.stopPropagation();  };};
    function stopImmediatePropagationImpl(e) {  return function() {    e.stopImmediatePropagation();  };};
    var PreventDefault = (function () {
        function PreventDefault() {

        };
        PreventDefault.value = new PreventDefault();
        return PreventDefault;
    })();
    var StopPropagation = (function () {
        function StopPropagation() {

        };
        StopPropagation.value = new StopPropagation();
        return StopPropagation;
    })();
    var StopImmediatePropagation = (function () {
        function StopImmediatePropagation() {

        };
        StopImmediatePropagation.value = new StopImmediatePropagation();
        return StopImmediatePropagation;
    })();
    var EventHandler = function (x) {
        return x;
    };
    var runEventHandler = function (e) {
        return function (_991) {
            var applyUpdate = function (_996) {
                if (_996 instanceof PreventDefault) {
                    return preventDefaultImpl(e);
                };
                if (_996 instanceof StopPropagation) {
                    return stopPropagationImpl(e);
                };
                if (_996 instanceof StopImmediatePropagation) {
                    return stopImmediatePropagationImpl(e);
                };
                throw new Error("Failed pattern match");
            };
            var _1371 = Control_Monad_Writer.runWriter(_991);
            return Control_Apply["*>"](Control_Monad_Eff.applyEff)(Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(_1371.value1)(applyUpdate))(Prelude["return"](Control_Monad_Eff.monadEff)(_1371.value0));
        };
    };
    var functorEventHandler = new Prelude.Functor(function (f) {
        return function (_992) {
            return Prelude["<$>"](Control_Monad_Writer_Trans.functorWriterT(Data_Identity.functorIdentity))(f)(_992);
        };
    });
    var applyEventHandler = new Prelude.Apply(function (_993) {
        return function (_994) {
            return Prelude["<*>"](Control_Monad_Writer_Trans.applyWriterT(Data_Monoid.monoidArray)(Data_Identity.applyIdentity))(_993)(_994);
        };
    }, function () {
        return functorEventHandler;
    });
    var applicativeEventHandler = new Prelude.Applicative(function () {
        return applyEventHandler;
    }, Prelude["<<<"](Prelude.semigroupoidArr)(EventHandler)(Prelude.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Data_Identity.applicativeIdentity))));
    return {
        runEventHandler: runEventHandler, 
        functorEventHandler: functorEventHandler, 
        applyEventHandler: applyEventHandler, 
        applicativeEventHandler: applicativeEventHandler
    };
})();
var PS = PS || {};
PS.Halogen_Internal_VirtualDOM = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var DOM = PS.DOM;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Nullable = PS.Data_Nullable;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var emptyProps = {};
    function prop(key, value) {  var props = {};  props[key] = value;  return props;};
    function handlerProp(key, f, props) {  var props = {};  var Hook = function () {};  Hook.prototype.callback = function(e) {    f(e)();  };  Hook.prototype.hook = function(node) {    node.addEventListener(key, this.callback);  };  Hook.prototype.unhook = function(node) {    node.removeEventListener(key, this.callback);  };  props['data-halogen-hook-' + key] = new Hook(f);  return props;};
    function concatProps(p1, p2) {  var props = {};  for (var key in p1) {    if (p1.hasOwnProperty(key)) {      props[key] = p1[key];    }  }  for (var key in p2) {    if (p2.hasOwnProperty(key)) {      props[key] = p2[key];    }  }  return props;};
    function createElement(vtree) {  return require('virtual-dom/create-element')(vtree);};
    function diff(vtree1) {  return function createElement(vtree2) {    return require('virtual-dom/diff')(vtree1, vtree2);  };};
    function patch(p) {  return function(node) {    return function() {      return require('virtual-dom/patch')(node, p);    };  };};
    function vtext(s) {  var VText = require('virtual-dom/vnode/vtext');  return new VText(s);};
    function vnode(name) {  return function(props) {    return function(children) {      var VirtualNode = require('virtual-dom/vnode/vnode');      return new VirtualNode(name, props, children);    };  };};
    function vwidget(driver) {  return function(w) {    return w.create(driver);  };};
    function mapWidget(f) {  return function(w) {    return {      create: function(driver) {        return w.create(function(i) {          return driver(f(i));        });      }    };  };};
    var semigroupProps = new Prelude.Semigroup(Data_Function.runFn2(concatProps));
    var monoidProps = new Data_Monoid.Monoid(function () {
        return semigroupProps;
    }, emptyProps);
    var functorWidget = new Prelude.Functor(mapWidget);
    return {
        vwidget: vwidget, 
        vnode: vnode, 
        vtext: vtext, 
        patch: patch, 
        diff: diff, 
        createElement: createElement, 
        handlerProp: handlerProp, 
        prop: prop, 
        emptyProps: emptyProps, 
        semigroupProps: semigroupProps, 
        monoidProps: monoidProps, 
        functorWidget: functorWidget
    };
})();
var PS = PS || {};
PS.Halogen_HTML_Attributes = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Exists = PS.Data_Exists;
    var Data_String = PS.Data_String;
    var Data_StrMap = PS.Data_StrMap;
    var Data_Array = PS.Data_Array;
    var DOM = PS.DOM;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Data_Foreign = PS.Data_Foreign;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Traversable = PS.Data_Traversable;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Halogen_Internal_VirtualDOM = PS.Halogen_Internal_VirtualDOM;
    var Halogen_HTML_Events_Types = PS.Halogen_HTML_Events_Types;
    var Halogen_HTML_Events_Handler = PS.Halogen_HTML_Events_Handler;
    function unsafeCoerce(x) {  return x;};
    var Styles = function (x) {
        return x;
    };
    var EventName = function (x) {
        return x;
    };
    var HandlerF = (function () {
        function HandlerF(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        HandlerF.create = function (value0) {
            return function (value1) {
                return new HandlerF(value0, value1);
            };
        };
        return HandlerF;
    })();
    var ClassName = function (x) {
        return x;
    };
    var AttributeName = function (x) {
        return x;
    };
    var AttrF = (function () {
        function AttrF(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        AttrF.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new AttrF(value0, value1, value2);
                };
            };
        };
        return AttrF;
    })();
    var Attr = (function () {
        function Attr(value0) {
            this.value0 = value0;
        };
        Attr.create = function (value0) {
            return new Attr(value0);
        };
        return Attr;
    })();
    var Handler = (function () {
        function Handler(value0) {
            this.value0 = value0;
        };
        Handler.create = function (value0) {
            return new Handler(value0);
        };
        return Handler;
    })();
    var IsAttribute = function (toAttrString) {
        this.toAttrString = toAttrString;
    };
    var toAttrString = function (dict) {
        return dict.toAttrString;
    };
    var styles = Styles;
    var stringIsAttribute = new IsAttribute(function (_1004) {
        return function (s) {
            return s;
        };
    });
    var runExistsR = unsafeCoerce;
    var runEventName = function (_1001) {
        return _1001;
    };
    var runClassName = function (_999) {
        return _999;
    };
    var runAttributeName = function (_1000) {
        return _1000;
    };
    var mkExistsR = unsafeCoerce;
    var handler = function (name) {
        return function (k) {
            return new Handler(mkExistsR(new HandlerF(name, k)));
        };
    };
    var eventName = EventName;
    var className = ClassName;
    var attributeName = AttributeName;
    var attr = function (__dict_IsAttribute_881) {
        return function (name) {
            return function (v) {
                return new Attr(Data_Exists.mkExists(new AttrF(toAttrString(__dict_IsAttribute_881), name, v)));
            };
        };
    };
    var class_ = Prelude["<<<"](Prelude.semigroupoidArr)(attr(stringIsAttribute)(attributeName("className")))(runClassName);
    var colSpan = Prelude["<<<"](Prelude.semigroupoidArr)(attr(stringIsAttribute)(attributeName("colSpan")))(Prelude.show(Prelude.showNumber));
    var functorAttr = new Prelude.Functor(function (f) {
        return function (_1003) {
            if (_1003 instanceof Attr) {
                return new Attr(_1003.value0);
            };
            if (_1003 instanceof Handler) {
                return runExistsR(function (_997) {
                    return new Handler(mkExistsR(new HandlerF(_997.value0, function (e_2) {
                        return Prelude["<$>"](Halogen_HTML_Events_Handler.functorEventHandler)(f)(_997.value1(e_2));
                    })));
                })(_1003.value0);
            };
            throw new Error("Failed pattern match");
        };
    });
    var rowSpan = Prelude["<<<"](Prelude.semigroupoidArr)(attr(stringIsAttribute)(attributeName("rowSpan")))(Prelude.show(Prelude.showNumber));
    var value = attr(stringIsAttribute)(attributeName("value"));
    var stylesIsAttribute = new IsAttribute(function (_1007) {
        return function (_1008) {
            return Data_String.joinWith("; ")(Prelude["<$>"](Data_Array.functorArray)(function (_998) {
                return _998.value0 + (": " + _998.value1);
            })(Data_StrMap.toList(_1008)));
        };
    });
    var style = attr(stylesIsAttribute)(attributeName("style"));
    return {
        Attr: Attr, 
        Handler: Handler, 
        HandlerF: HandlerF, 
        AttrF: AttrF, 
        IsAttribute: IsAttribute, 
        style: style, 
        value: value, 
        rowSpan: rowSpan, 
        colSpan: colSpan, 
        class_: class_, 
        handler: handler, 
        attr: attr, 
        runExistsR: runExistsR, 
        mkExistsR: mkExistsR, 
        toAttrString: toAttrString, 
        styles: styles, 
        runEventName: runEventName, 
        eventName: eventName, 
        runAttributeName: runAttributeName, 
        attributeName: attributeName, 
        runClassName: runClassName, 
        className: className, 
        functorAttr: functorAttr, 
        stringIsAttribute: stringIsAttribute, 
        stylesIsAttribute: stylesIsAttribute
    };
})();
var PS = PS || {};
PS.Halogen_HTML = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Bifunctor = PS.Data_Bifunctor;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Void = PS.Data_Void;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Foreign = PS.Data_Foreign;
    var Data_Function = PS.Data_Function;
    var Data_StrMap = PS.Data_StrMap;
    var Data_String = PS.Data_String;
    var Data_Foldable = PS.Data_Foldable;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Eff_Unsafe = PS.Control_Monad_Eff_Unsafe;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Halogen_Internal_VirtualDOM = PS.Halogen_Internal_VirtualDOM;
    var Halogen_HTML_Attributes = PS.Halogen_HTML_Attributes;
    var Data_Array = PS.Data_Array;
    var TagName = function (x) {
        return x;
    };
    var Text = (function () {
        function Text(value0) {
            this.value0 = value0;
        };
        Text.create = function (value0) {
            return new Text(value0);
        };
        return Text;
    })();
    var Element = (function () {
        function Element(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        Element.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new Element(value0, value1, value2);
                };
            };
        };
        return Element;
    })();
    var Placeholder = (function () {
        function Placeholder(value0) {
            this.value0 = value0;
        };
        Placeholder.create = function (value0) {
            return new Placeholder(value0);
        };
        return Placeholder;
    })();
    var text = Text.create;
    var tagName = TagName;
    var element = Element.create;
    var h1 = function (xs) {
        return element(tagName("h1"))(xs);
    };
    var h1_ = h1(Data_Monoid.mempty(Data_Monoid.monoidArray));
    var h2 = function (xs) {
        return element(tagName("h2"))(xs);
    };
    var h2_ = h2(Data_Monoid.mempty(Data_Monoid.monoidArray));
    var p = function (xs) {
        return element(tagName("p"))(xs);
    };
    var p_ = p(Data_Monoid.mempty(Data_Monoid.monoidArray));
    var runTagName = function (_1009) {
        return _1009;
    };
    var table = function (xs) {
        return element(tagName("table"))(xs);
    };
    var table_ = table(Data_Monoid.mempty(Data_Monoid.monoidArray));
    var tbody = function (xs) {
        return element(tagName("tbody"))(xs);
    };
    var tbody_ = tbody(Data_Monoid.mempty(Data_Monoid.monoidArray));
    var td = function (xs) {
        return element(tagName("td"))(xs);
    };
    var textarea = function (xs) {
        return element(tagName("textarea"))(xs);
    };
    var th = function (xs) {
        return element(tagName("th"))(xs);
    };
    var thead = function (xs) {
        return element(tagName("thead"))(xs);
    };
    var thead_ = thead(Data_Monoid.mempty(Data_Monoid.monoidArray));
    var tr = function (xs) {
        return element(tagName("tr"))(xs);
    };
    var tr_ = tr(Data_Monoid.mempty(Data_Monoid.monoidArray));
    var div = function (xs) {
        return element(tagName("div"))(xs);
    };
    var bifunctorHTML = new Data_Bifunctor.Bifunctor(function (f) {
        return function (g) {
            var go = function (_1011) {
                if (_1011 instanceof Text) {
                    return new Text(_1011.value0);
                };
                if (_1011 instanceof Element) {
                    return new Element(_1011.value0, Prelude["<$>"](Data_Array.functorArray)(Prelude["<$>"](Halogen_HTML_Attributes.functorAttr)(g))(_1011.value1), Prelude["<$>"](Data_Array.functorArray)(go)(_1011.value2));
                };
                if (_1011 instanceof Placeholder) {
                    return new Placeholder(f(_1011.value0));
                };
                throw new Error("Failed pattern match");
            };
            return go;
        };
    });
    return {
        Text: Text, 
        Element: Element, 
        Placeholder: Placeholder, 
        tr_: tr_, 
        tr: tr, 
        thead_: thead_, 
        thead: thead, 
        th: th, 
        textarea: textarea, 
        td: td, 
        tbody_: tbody_, 
        tbody: tbody, 
        table_: table_, 
        table: table, 
        p_: p_, 
        p: p, 
        h2_: h2_, 
        h2: h2, 
        h1_: h1_, 
        h1: h1, 
        div: div, 
        runTagName: runTagName, 
        tagName: tagName, 
        element: element, 
        text: text, 
        bifunctorHTML: bifunctorHTML
    };
})();
var PS = PS || {};
PS.Halogen_HTML_Events = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Halogen_HTML_Attributes = PS.Halogen_HTML_Attributes;
    var Data_Maybe = PS.Data_Maybe;
    var Halogen_HTML_Events_Handler = PS.Halogen_HTML_Events_Handler;
    var Halogen_HTML_Events_Types = PS.Halogen_HTML_Events_Types;
    var input = function (__dict_Applicative_882) {
        return function (f) {
            return function (e) {
                return Prelude.pure(Halogen_HTML_Events_Handler.applicativeEventHandler)(Prelude.pure(__dict_Applicative_882)(f(e)));
            };
        };
    };
    return {
        input: input
    };
})();
var PS = PS || {};
PS.Halogen_HTML_Events_Forms = (function () {
    "use strict";
    var Data_Foreign_Class = PS.Data_Foreign_Class;
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    var Halogen_HTML_Attributes = PS.Halogen_HTML_Attributes;
    var Data_Foreign = PS.Data_Foreign;
    var DOM = PS.DOM;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Data_Traversable = PS.Data_Traversable;
    var Control_Alternative = PS.Control_Alternative;
    var Halogen_HTML_Events_Handler = PS.Halogen_HTML_Events_Handler;
    var Data_Foreign_Index = PS.Data_Foreign_Index;
    var addForeignPropHandler = function (__dict_Alternative_883) {
        return function (__dict_IsForeign_884) {
            return function (key) {
                return function (prop) {
                    return function (f) {
                        var handler = function (e) {
                            var _1402 = Data_Foreign_Class.readProp(__dict_IsForeign_884)(Data_Foreign_Index.indexString)(prop)(e);
                            if (_1402 instanceof Data_Either.Left) {
                                return Prelude.pure(Halogen_HTML_Events_Handler.applicativeEventHandler)(Control_Plus.empty(__dict_Alternative_883["__superclass_Control.Plus.Plus_1"]()));
                            };
                            if (_1402 instanceof Data_Either.Right) {
                                return f(_1402.value0);
                            };
                            throw new Error("Failed pattern match");
                        };
                        return Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName(key))(function (e) {
                            return handler(Data_Foreign.toForeign(e.target));
                        });
                    };
                };
            };
        };
    };
    var onInput = function (__dict_Alternative_886) {
        return function (__dict_IsForeign_887) {
            return addForeignPropHandler(__dict_Alternative_886)(__dict_IsForeign_887)("input")("value");
        };
    };
    return {
        onInput: onInput
    };
})();
var PS = PS || {};
PS.Halogen_HTML_Renderer_VirtualDOM = (function () {
    "use strict";
    var Data_Exists = PS.Data_Exists;
    var Data_Function = PS.Data_Function;
    var Halogen_Internal_VirtualDOM = PS.Halogen_Internal_VirtualDOM;
    var Halogen_HTML_Attributes = PS.Halogen_HTML_Attributes;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff_Unsafe = PS.Control_Monad_Eff_Unsafe;
    var Halogen_HTML_Events_Handler = PS.Halogen_HTML_Events_Handler;
    var Halogen_HTML = PS.Halogen_HTML;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Array = PS.Data_Array;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Halogen_HTML_Events_Types = PS.Halogen_HTML_Events_Types;
    var renderAttr = function (dr) {
        return function (_1017) {
            if (_1017 instanceof Halogen_HTML_Attributes.Attr) {
                return Data_Exists.runExists(function (_1015) {
                    return Halogen_Internal_VirtualDOM.prop(Halogen_HTML_Attributes.runAttributeName(_1015.value1), _1015.value2);
                })(_1017.value0);
            };
            if (_1017 instanceof Halogen_HTML_Attributes.Handler) {
                return Halogen_HTML_Attributes.runExistsR(function (_1016) {
                    return Halogen_Internal_VirtualDOM.handlerProp(Halogen_HTML_Attributes.runEventName(_1016.value0), function (ev) {
                        return function __do() {
                            var _60 = Control_Monad_Eff_Unsafe.unsafeInterleaveEff(Halogen_HTML_Events_Handler.runEventHandler(ev)(_1016.value1(ev)))();
                            return dr(_60)();
                        };
                    });
                })(_1017.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
    var renderHTML = function (f) {
        return function (g) {
            var go = function (_1018) {
                if (_1018 instanceof Halogen_HTML.Text) {
                    return Halogen_Internal_VirtualDOM.vtext(_1018.value0);
                };
                if (_1018 instanceof Halogen_HTML.Placeholder) {
                    return Halogen_Internal_VirtualDOM.vwidget(f)(g(_1018.value0));
                };
                if (_1018 instanceof Halogen_HTML.Element) {
                    return Halogen_Internal_VirtualDOM.vnode(Halogen_HTML.runTagName(_1018.value0))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Halogen_Internal_VirtualDOM.monoidProps)(renderAttr(f))(_1018.value1))(Data_Array.map(go)(_1018.value2));
                };
                throw new Error("Failed pattern match");
            };
            return go;
        };
    };
    return {
        renderHTML: renderHTML
    };
})();
var PS = PS || {};
PS.Halogen_Component = (function () {
    "use strict";
    var Data_Either = PS.Data_Either;
    var Data_Void = PS.Data_Void;
    var Prelude = PS.Prelude;
    var Data_Profunctor = PS.Data_Profunctor;
    var Data_Bifunctor = PS.Data_Bifunctor;
    var Data_Exists = PS.Data_Exists;
    var Halogen_HTML_Widget = PS.Halogen_HTML_Widget;
    var Halogen_HTML = PS.Halogen_HTML;
    var Halogen_Signal = PS.Halogen_Signal;
    var DOM = PS.DOM;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Halogen_Internal_VirtualDOM = PS.Halogen_Internal_VirtualDOM;
    var ComponentF = function (x) {
        return x;
    };
    var Component = function (x) {
        return x;
    };
    var runComponent = function (f) {
        return function (_1022) {
            return Data_Exists.runExists(function (_1021) {
                return f(_1021);
            })(_1022);
        };
    };
    var component$prime = function (sf) {
        return Data_Exists.mkExists(sf);
    };
    var component = function (__dict_Functor_891) {
        return function (sf) {
            var f = Data_Either.either(Data_Void.absurd)(Prelude.id(Prelude.categoryArr));
            return component$prime(Data_Profunctor.dimap(Halogen_Signal.profunctorSF1)(f)(Data_Bifunctor.rmap(Halogen_HTML.bifunctorHTML)(Prelude["<$>"](__dict_Functor_891)(Data_Either.Right.create)))(sf));
        };
    };
    return {
        "component'": component$prime, 
        component: component, 
        runComponent: runComponent
    };
})();
var PS = PS || {};
PS.Data_Argonaut_Core = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_StrMap = PS.Data_StrMap;
    var Optic_Prism = PS.Optic_Prism;
    var Optic_Fold = PS.Optic_Fold;
    var Optic_Core = PS.Optic_Core;
    var Optic_Extended = PS.Optic_Extended;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Profunctor_Choice = PS.Data_Profunctor_Choice;
    function fromNull(_){return null;};
    function fromBoolean(b){return b;};
    function fromNumber(n){return n;};
    function fromString(s){return s;};
    function _foldJson(isNull, isBool, isNum, isStr, isArr, isObj, j) {   if (j == null) return isNull(null);                                else if (typeof j === 'boolean') return isBool(j);                 else if (typeof j === 'number') return isNum(j);                   else if (typeof j === 'string') return isStr(j);                   else if (Object.prototype.toString.call(j) === '[object Array]') return isArr(j);    else return isObj(j);                                           };
    var verbJsonType = function (def) {
        return function (f) {
            return function (fold) {
                return fold(def)(f);
            };
        };
    };
    var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
    var foldJsonObject = function (d) {
        return function (f) {
            return function (j) {
                return _foldJson(Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), f, j);
            };
        };
    };
    var toObject = toJsonType(foldJsonObject);
    var foldJson = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (json) {
                                return _foldJson(a, b, c, d, e, f, json);
                            };
                        };
                    };
                };
            };
        };
    };
    return {
        toObject: toObject, 
        fromString: fromString, 
        fromNumber: fromNumber, 
        fromNull: fromNull, 
        fromBoolean: fromBoolean, 
        foldJsonObject: foldJsonObject, 
        foldJson: foldJson
    };
})();
var PS = PS || {};
PS.Data_Argonaut_Parser = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Argonaut_Core = PS.Data_Argonaut_Core;
    var Data_Either = PS.Data_Either;
    function _jsonParser(fail, succ, s) {   try { return succ(JSON.parse(s)); } catch (e) { return fail(e.message); }};
    var jsonParser = function (j) {
        return _jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
    };
    return {
        jsonParser: jsonParser
    };
})();
var PS = PS || {};
PS.Data_Argonaut_JCursor = (function () {
    "use strict";
    var Data_Argonaut_Core = PS.Data_Argonaut_Core;
    var Prelude = PS.Prelude;
    var Data_StrMap = PS.Data_StrMap;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Argonaut_Encode = PS.Data_Argonaut_Encode;
    var Data_Argonaut_Decode = PS.Data_Argonaut_Decode;
    var Data_Argonaut_Combinators = PS.Data_Argonaut_Combinators;
    var Data_Monoid = PS.Data_Monoid;
    var Data_String = PS.Data_String;
    var Data_Either = PS.Data_Either;
    var jsonNull0 = null;;
    var JsonPrim = function (x) {
        return x;
    };
    var JCursorTop = (function () {
        function JCursorTop() {

        };
        JCursorTop.value = new JCursorTop();
        return JCursorTop;
    })();
    var JField = (function () {
        function JField(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        JField.create = function (value0) {
            return function (value1) {
                return new JField(value0, value1);
            };
        };
        return JField;
    })();
    var JIndex = (function () {
        function JIndex(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        JIndex.create = function (value0) {
            return function (value1) {
                return new JIndex(value0, value1);
            };
        };
        return JIndex;
    })();
    var runJsonPrim = function (_1069) {
        return _1069;
    };
    var primToJson = function (p) {
        return runJsonPrim(p)(Data_Argonaut_Core.fromNull)(Data_Argonaut_Core.fromBoolean)(Data_Argonaut_Core.fromNumber)(Data_Argonaut_Core.fromString);
    };
    var primStr = function (v) {
        return function (_1068) {
            return function (_1067) {
                return function (_1066) {
                    return function (f) {
                        return f(v);
                    };
                };
            };
        };
    };
    var primNum = function (v) {
        return function (_1065) {
            return function (_1064) {
                return function (f) {
                    return function (_1063) {
                        return f(v);
                    };
                };
            };
        };
    };
    var primNull = function (f) {
        return function (_1059) {
            return function (_1058) {
                return function (_1057) {
                    return f(jsonNull0);
                };
            };
        };
    };
    var primBool = function (v) {
        return function (_1062) {
            return function (f) {
                return function (_1061) {
                    return function (_1060) {
                        return f(v);
                    };
                };
            };
        };
    };
    var downIndex = function (i) {
        var downIndex$prime = function (_1075) {
            if (_1075 instanceof JCursorTop) {
                return new JIndex(i, JCursorTop.value);
            };
            if (_1075 instanceof JField) {
                return new JField(_1075.value0, downIndex$prime(_1075.value1));
            };
            if (_1075 instanceof JIndex) {
                return new JIndex(_1075.value0, downIndex$prime(_1075.value1));
            };
            throw new Error("Failed pattern match");
        };
        return downIndex$prime;
    };
    var downField = function (i) {
        var downField$prime = function (_1074) {
            if (_1074 instanceof JCursorTop) {
                return new JField(i, JCursorTop.value);
            };
            if (_1074 instanceof JField) {
                return new JField(_1074.value0, downField$prime(_1074.value1));
            };
            if (_1074 instanceof JIndex) {
                return new JIndex(_1074.value0, downField$prime(_1074.value1));
            };
            throw new Error("Failed pattern match");
        };
        return downField$prime;
    };
    return {
        JsonPrim: JsonPrim, 
        JCursorTop: JCursorTop, 
        JField: JField, 
        JIndex: JIndex, 
        runJsonPrim: runJsonPrim, 
        primToJson: primToJson, 
        primStr: primStr, 
        primNum: primNum, 
        primBool: primBool, 
        primNull: primNull, 
        downIndex: downIndex, 
        downField: downField
    };
})();
var PS = PS || {};
PS.Data_Json_JTable_Internal = (function () {
    "use strict";
    var Data_Argonaut_Core = PS.Data_Argonaut_Core;
    var Data_Argonaut_JCursor = PS.Data_Argonaut_JCursor;
    var Prelude = PS.Prelude;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Array = PS.Data_Array;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Foldable = PS.Data_Foldable;
    var $$Math = PS.$$Math;
    var Data_StrMap = PS.Data_StrMap;
    var Data_Maybe = PS.Data_Maybe;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Halogen_HTML = PS.Halogen_HTML;
    var Data_String = PS.Data_String;
    var Data_Void = PS.Data_Void;
    var Data_Either = PS.Data_Either;
    var Control_Bind = PS.Control_Bind;
    var Data_Argonaut_Parser = PS.Data_Argonaut_Parser;
    var Tree = function (x) {
        return x;
    };
    var Cell = function (x) {
        return x;
    };
    var zipWithIndex = function (xs) {
        return Data_Tuple.zip(xs)(Data_Array[".."](0)(Data_Array.length(xs) - 1));
    };
    var sortTree = function (ord) {
        return function (_1106) {
            return Tree((function (_6) {
                var _1451 = {};
                for (var _1452 in _1106) {
                    if (_1106.hasOwnProperty(_1452)) {
                        _1451[_1452] = _1106[_1452];
                    };
                };
                _1451.kids = _6;
                return _1451;
            })(Data_Array.sortBy(function (_1097) {
                return function (_1096) {
                    return ord(_1097.label)(_1097.path)(_1096.label)(_1096.path);
                };
            })(Prelude["<#>"](Data_Array.functorArray)(_1106.kids)(sortTree(ord)))));
        };
    };
    var runTree = function (_1098) {
        return _1098;
    };
    var tMergeArray = function (_1100) {
        return function (_1101) {
            var i = Data_Array.findIndex(Prelude[">>>"](Prelude.semigroupoidArr)(runTree)(Prelude[">>>"](Prelude.semigroupoidArr)(function (_0) {
                return _0.label;
            })(function (_8) {
                return _8 === _1101.label;
            })))(_1100.kids);
            var _1458 = Data_Array["!!"](_1100.kids)(i);
            if (_1458 instanceof Data_Maybe.Just) {
                var _1459 = Data_Foldable.foldl(Data_Foldable.foldableArray)(tMergeArray)(_1458.value0)(_1101.kids);
                var h$prime = $$Math.max(_1100.height)(_1459.height + 1);
                var cw$prime$prime = $$Math.max(_1459.width)((function () {
                    var _1460 = Data_Array["null"](_1101.kids) && !Data_Array["null"](_1459.kids);
                    if (_1460) {
                        return 1;
                    };
                    if (!_1460) {
                        return _1101.width;
                    };
                    throw new Error("Failed pattern match");
                })());
                var k$prime = Data_Array.updateAt(i)({
                    label: _1458.value0.label, 
                    path: _1458.value0.path, 
                    width: cw$prime$prime, 
                    height: _1459.height, 
                    kids: _1459.kids
                })(_1100.kids);
                var w$prime = (_1100.width - _1458.value0.width) + cw$prime$prime;
                return {
                    label: _1100.label, 
                    path: _1100.path, 
                    width: w$prime, 
                    height: h$prime, 
                    kids: k$prime
                };
            };
            if (_1458 instanceof Data_Maybe.Nothing) {
                var w$prime = (function () {
                    var _1462 = Data_Array["null"](_1100.kids);
                    if (_1462) {
                        return _1101.width;
                    };
                    if (!_1462) {
                        return _1100.width + _1101.width;
                    };
                    throw new Error("Failed pattern match");
                })();
                var k$prime = Data_Array.snoc(_1100.kids)(_1101);
                var h$prime = $$Math.max(_1100.height)(_1101.height + 1);
                return {
                    label: _1100.label, 
                    path: _1100.path, 
                    width: w$prime, 
                    height: h$prime, 
                    kids: k$prime
                };
            };
            throw new Error("Failed pattern match");
        };
    };
    var tsToRows = function (ts) {
        var _1463 = Data_Array["null"](ts);
        if (_1463) {
            return [  ];
        };
        if (!_1463) {
            return Prelude[":"](ts)(tsToRows(Prelude[">>="](Data_Array.bindArray)(ts)(Prelude[">>>"](Prelude.semigroupoidArr)(runTree)(function (_5) {
                return _5.kids;
            }))));
        };
        throw new Error("Failed pattern match");
    };
    var renderRows = function (tr) {
        return function (cellf) {
            return function (rows) {
                return Prelude[">>="](Data_Array.bindArray)(zipWithIndex(rows))(function (_68) {
                    return Prelude["return"](Data_Array.monadArray)(tr(Prelude[">>="](Data_Array.bindArray)(zipWithIndex(_68.value0))(function (_67) {
                        return Prelude["return"](Data_Array.monadArray)(cellf(_68.value1)(_67.value1)(_67.value0));
                    })));
                });
            };
        };
    };
    var renderTbody = function (tr) {
        return function (tdf) {
            return function (_1105) {
                return function (table) {
                    var tdf$prime = function (y) {
                        return function (x) {
                            return function (_1109) {
                                return tdf(_1109.cursor)(_1109.json)(_1109.width)(_1109.height);
                            };
                        };
                    };
                    return Halogen_HTML.tbody_(renderRows(tr)(tdf$prime)(table));
                };
            };
        };
    };
    var renderThead = function (tr) {
        return function (thf) {
            return function (_1104) {
                var rs = function (i) {
                    return function (k) {
                        var _1480 = Data_Array["null"](k);
                        if (_1480) {
                            return _1104.height - i;
                        };
                        if (!_1480) {
                            return 1;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
                var tdf$prime = function (y) {
                    return function (x) {
                        return function (_1108) {
                            return thf(_1108.label)(_1108.path)(_1108.width)(rs(y)(_1108.kids));
                        };
                    };
                };
                return Halogen_HTML.thead_(renderRows(tr)(tdf$prime)(tsToRows(_1104.kids)));
            };
        };
    };
    var padTree = function (maxh) {
        return function (_1107) {
            var _1486 = !Data_Array["null"](_1107.kids);
            if (_1486) {
                var _1487 = {};
                for (var _1488 in _1107) {
                    if (_1107.hasOwnProperty(_1488)) {
                        _1487[_1488] = _1107[_1488];
                    };
                };
                _1487.kids = Prelude["<#>"](Data_Array.functorArray)(_1107.kids)(padTree(maxh - 1));
                return _1487;
            };
            if (!_1486) {
                var _1489 = maxh > 0;
                if (_1489) {
                    return {
                        label: "", 
                        path: _1107.path, 
                        width: _1107.width, 
                        height: 1, 
                        kids: [ padTree(maxh - 1)(_1107) ]
                    };
                };
                if (!_1489) {
                    var _1490 = {};
                    for (var _1491 in _1107) {
                        if (_1107.hasOwnProperty(_1491)) {
                            _1490[_1491] = _1107[_1491];
                        };
                    };
                    _1490.height = 1;
                    return _1490;
                };
                throw new Error("Failed pattern match");
            };
            throw new Error("Failed pattern match");
        };
    };
    var foldJsonP = function (f) {
        return Data_Argonaut_Core.foldJson(function (_1091) {
            return f(Data_Argonaut_JCursor.primNull);
        })(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Argonaut_JCursor.primBool))(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Argonaut_JCursor.primNum))(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Argonaut_JCursor.primStr));
    };
    var toPrim = foldJsonP(Data_Maybe.Just.create)(Prelude["const"](Data_Maybe.Nothing.value))(Prelude["const"](Data_Maybe.Nothing.value));
    var widthOfPrimTuple = function (maxTupleSize) {
        return function (path) {
            return function (ja) {
                return Prelude[">>="](Data_Maybe.bindMaybe)(Data_Array["!!"](path)(0))(function () {
                    return Prelude[">>="](Data_Maybe.bindMaybe)(Data_Array["!!"](ja)(1))(function () {
                        return Prelude[">>="](Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(ja)(toPrim))(function () {
                            var _1493 = Data_Array.length(ja) <= maxTupleSize;
                            if (_1493) {
                                return new Data_Maybe.Just(Data_Array.length(ja));
                            };
                            if (!_1493) {
                                return Data_Maybe.Nothing.value;
                            };
                            throw new Error("Failed pattern match");
                        });
                    });
                });
            };
        };
    };
    var tFromJson = function (maxTupleSize) {
        return function (label) {
            return function (path) {
                var tuple = function (ja) {
                    return Prelude["<#>"](Data_Maybe.functorMaybe)(widthOfPrimTuple(maxTupleSize)(path)(ja))(function (n) {
                        return {
                            label: label, 
                            path: path, 
                            width: n, 
                            height: 0, 
                            kids: [  ]
                        };
                    });
                };
                var prim = function (jp) {
                    return {
                        label: label, 
                        path: path, 
                        width: 1, 
                        height: 0, 
                        kids: [  ]
                    };
                };
                var obj = function (jo) {
                    var _1494 = Data_StrMap.isEmpty(jo);
                    if (_1494) {
                        return {
                            label: label, 
                            path: path, 
                            width: 1, 
                            height: 0, 
                            kids: [  ]
                        };
                    };
                    if (!_1494) {
                        var k = Prelude["<#>"](Data_Array.functorArray)(Data_StrMap.toList(jo))(Data_Tuple.uncurry(function (l) {
                            return function (j) {
                                return tFromJson(maxTupleSize)(l)(Data_Array.snoc(path)(l))(j);
                            };
                        }));
                        var w = Data_Foldable.foldl(Data_Foldable.foldableArray)(Prelude["+"](Prelude.semiringNumber))(0)(Prelude["<#>"](Data_Array.functorArray)(k)(Prelude[">>>"](Prelude.semigroupoidArr)(runTree)(function (_3) {
                            return _3.width;
                        })));
                        var h = 1 + Data_Foldable.foldl(Data_Foldable.foldableArray)($$Math.max)(0)(Prelude["<#>"](Data_Array.functorArray)(k)(Prelude[">>>"](Prelude.semigroupoidArr)(runTree)(function (_4) {
                            return _4.height;
                        })));
                        return {
                            label: label, 
                            path: path, 
                            width: w, 
                            height: h, 
                            kids: k
                        };
                    };
                    throw new Error("Failed pattern match");
                };
                var array = function (ja) {
                    var ts = Prelude["<#>"](Data_Array.functorArray)(ja)(tFromJson(maxTupleSize)(label)(path));
                    var w$prime = (function () {
                        var _1495 = Data_Array.nub(Prelude.eqNumber)(Prelude["<#>"](Data_Array.functorArray)(ts)(Prelude[">>>"](Prelude.semigroupoidArr)(runTree)(function (_2) {
                            return _2.width;
                        })));
                        if (_1495.length === 1) {
                            return _1495[0];
                        };
                        return 1;
                    })();
                    var t = runTree(Data_Foldable.foldl(Data_Foldable.foldableArray)(tMergeArray)({
                        label: label, 
                        path: path, 
                        width: 0, 
                        height: 0, 
                        kids: [  ]
                    })(Prelude[">>="](Data_Array.bindArray)(ts)(Prelude[">>>"](Prelude.semigroupoidArr)(runTree)(function (_1) {
                        return _1.kids;
                    }))));
                    var w = $$Math.max(t.width)(w$prime);
                    return {
                        label: label, 
                        path: path, 
                        width: w, 
                        height: t.height, 
                        kids: t.kids
                    };
                };
                return foldJsonP(prim)(Prelude["<*>"](Prelude.applyArr)(Prelude["<$>"](Prelude.functorArr)(Data_Maybe.fromMaybe)(array))(tuple))(obj);
            };
        };
    };
    var cMergeObj = function (rss) {
        var maxh = Data_Foldable.foldl(Data_Foldable.foldableArray)($$Math.max)(0)(Prelude["<#>"](Data_Array.functorArray)(Prelude["<#>"](Data_Array.functorArray)(rss)(Data_Tuple.snd))(Data_Array.length));
        return Prelude["<#>"](Data_Array.functorArray)(Data_Array.range(0)($$Math.max(0)(maxh - 1)))(function (n) {
            return Prelude[">>="](Data_Array.bindArray)(rss)(Data_Tuple.uncurry(function (w) {
                return function (rs) {
                    var rnOr = function (_9) {
                        return Data_Maybe.fromMaybe(_9)(Data_Array["!!"](rs)(n));
                    };
                    if (rs.length === 1) {
                        var _1498 = n === 0;
                        if (_1498) {
                            return Prelude["<#>"](Data_Array.functorArray)(rs[0])(function (_1092) {
                                return {
                                    cursor: _1092.cursor, 
                                    width: _1092.width, 
                                    height: maxh, 
                                    json: _1092.json
                                };
                            });
                        };
                        if (!_1498) {
                            return rnOr([  ]);
                        };
                        throw new Error("Failed pattern match");
                    };
                    return rnOr([ {
                        cursor: Data_Argonaut_JCursor.JCursorTop.value, 
                        width: w, 
                        height: 1, 
                        json: Data_Argonaut_JCursor.primNull
                    } ]);
                };
            }));
        });
    };
    var mergeObjTuple = function (maxTupleSize) {
        return function (_1102) {
            return function (c) {
                return function (ja) {
                    return Prelude[">>="](Data_Maybe.bindMaybe)(Data_Array.head(ja))(function () {
                        return Prelude[">>="](Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(ja)(Data_Argonaut_Core.toObject))(function (_66) {
                            var keyss = Prelude["<#>"](Data_Array.functorArray)(_66)(Data_StrMap.keys);
                            var all_keys = Data_Array.concat(keyss);
                            return Prelude[">>="](Data_Maybe.bindMaybe)(Control_MonadPlus.guard(Data_Maybe.monadPlusMaybe)(Data_Array.length(all_keys) === Data_Array.length(Data_Array.nub(Prelude.eqString)(all_keys))))(function () {
                                return Data_Maybe.Just.create(cMergeObj(Prelude["<#>"](Data_Array.functorArray)(_1102.kids)(function (_1093) {
                                    var i = Data_Array.findIndex(Data_Foldable.elem(Prelude.eqString)(Data_Foldable.foldableArray)(_1093.label))(keyss);
                                    var j = Data_Maybe.fromMaybe(Data_Argonaut_JCursor.primToJson(Data_Argonaut_JCursor.primNull))(Prelude[">>="](Data_Maybe.bindMaybe)(Data_Array["!!"](_66)(i))(Data_StrMap.lookup(_1093.label)));
                                    return new Data_Tuple.Tuple(_1093.width, cFromJson(maxTupleSize)(_1093)(Data_Argonaut_JCursor.downField(_1093.label)(Data_Argonaut_JCursor.downIndex(i)(c)))(j));
                                })));
                            });
                        });
                    });
                };
            };
        };
    };
    var cFromJson = function (maxTupleSize) {
        return function (_1103) {
            return function (c) {
                var width = (function () {
                    var _1510 = Data_Array["null"](_1103.kids) && _1103.width > 1;
                    if (_1510) {
                        return widthOfPrimTuple(maxTupleSize)(_1103.path);
                    };
                    if (!_1510) {
                        return Prelude["const"](Data_Maybe.Nothing.value);
                    };
                    throw new Error("Failed pattern match");
                })();
                var primtup = function (ja) {
                    return Prelude["<#>"](Data_Maybe.functorMaybe)(width(ja))(function (_1094) {
                        return Data_Array.singleton(Prelude["<#>"](Data_Array.functorArray)(Data_Array[".."](0)(_1103.width - 1))(function (i) {
                            return {
                                cursor: Data_Argonaut_JCursor.downIndex(i)(c), 
                                width: 1, 
                                height: 1, 
                                json: Data_Maybe.fromMaybe(Data_Argonaut_JCursor.primNull)(Prelude[">>="](Data_Maybe.bindMaybe)(Data_Array["!!"](ja)(i))(toPrim))
                            };
                        }));
                    });
                };
                var prim = function (jp) {
                    return [ [ {
                        cursor: c, 
                        width: _1103.width, 
                        height: 1, 
                        json: jp
                    } ] ];
                };
                var objtup = mergeObjTuple(maxTupleSize)(_1103)(c);
                var tuple = function (ja) {
                    var _1512 = primtup(ja);
                    if (_1512 instanceof Data_Maybe.Nothing) {
                        return objtup(ja);
                    };
                    return _1512;
                };
                var obj = function (jo) {
                    var _1513 = Data_StrMap.isEmpty(jo);
                    if (_1513) {
                        return [ [ {
                            cursor: c, 
                            width: _1103.width, 
                            height: 1, 
                            json: Data_Argonaut_JCursor.primNull
                        } ] ];
                    };
                    if (!_1513) {
                        return cMergeObj(Prelude["<#>"](Data_Array.functorArray)(_1103.kids)(function (_1095) {
                            var j = Data_Maybe.fromMaybe(Data_Argonaut_JCursor.primToJson(Data_Argonaut_JCursor.primNull))(Data_StrMap.lookup(_1095.label)(jo));
                            return new Data_Tuple.Tuple(_1095.width, cFromJson(maxTupleSize)(_1095)(Data_Argonaut_JCursor.downField(_1095.label)(c))(j));
                        }));
                    };
                    throw new Error("Failed pattern match");
                };
                var array = function (ja) {
                    return Prelude[">>="](Data_Array.bindArray)(zipWithIndex(ja))(Data_Tuple.uncurry(function (j) {
                        return function (i) {
                            return cFromJson(maxTupleSize)(_1103)(Data_Argonaut_JCursor.downIndex(i)(c))(j);
                        };
                    }));
                };
                return foldJsonP(prim)(Prelude["<*>"](Prelude.applyArr)(Prelude["<$>"](Prelude.functorArr)(Data_Maybe.fromMaybe)(array))(tuple))(obj);
            };
        };
    };
    var renderJTableRaw = function (o) {
        return function (json) {
            var rawT = tFromJson(o.maxTupleSize)("")([  ])(json);
            var sortedT = sortTree(o.columnOrdering)(rawT);
            var table = cFromJson(o.maxTupleSize)(sortedT)(Data_Argonaut_JCursor.JCursorTop.value)(json);
            var paddedT = (function () {
                if (o.insertHeaderCells) {
                    return padTree((runTree(sortedT)).height);
                };
                if (!o.insertHeaderCells) {
                    return Prelude.id(Prelude.categoryArr);
                };
                throw new Error("Failed pattern match");
            })()(sortedT);
            return o.style.table([ renderThead(o.style.tr)(o.style.th)(paddedT), renderTbody(o.style.tr)(o.style.td)(sortedT)(table) ]);
        };
    };
    return {
        Cell: Cell, 
        Tree: Tree, 
        zipWithIndex: zipWithIndex, 
        toPrim: toPrim, 
        foldJsonP: foldJsonP, 
        mergeObjTuple: mergeObjTuple, 
        cMergeObj: cMergeObj, 
        cFromJson: cFromJson, 
        padTree: padTree, 
        widthOfPrimTuple: widthOfPrimTuple, 
        tMergeArray: tMergeArray, 
        tFromJson: tFromJson, 
        sortTree: sortTree, 
        tsToRows: tsToRows, 
        renderTbody: renderTbody, 
        renderThead: renderThead, 
        renderRows: renderRows, 
        renderJTableRaw: renderJTableRaw
    };
})();
var PS = PS || {};
PS.Data_Json_JTable = (function () {
    "use strict";
    var Data_Argonaut_JCursor = PS.Data_Argonaut_JCursor;
    var Prelude = PS.Prelude;
    var Halogen_HTML = PS.Halogen_HTML;
    var Halogen_HTML_Attributes = PS.Halogen_HTML_Attributes;
    var Data_String = PS.Data_String;
    var Data_Json_JTable_Internal = PS.Data_Json_JTable_Internal;
    var Data_Argonaut_Core = PS.Data_Argonaut_Core;
    var Data_Foldable = PS.Data_Foldable;
    var renderJsonSimple = function (j) {
        return Data_Argonaut_JCursor.runJsonPrim(j)(Prelude["const"](""))(Prelude.show(Prelude.showBoolean))(Prelude.show(Prelude.showNumber))(Prelude.id(Prelude.categoryArr));
    };
    var renderJTable = Data_Json_JTable_Internal.renderJTableRaw;
    var noStyle = {
        table: Halogen_HTML.table_, 
        tr: Halogen_HTML.tr_, 
        th: function (l) {
            return function (_1110) {
                return function (w) {
                    return function (h) {
                        return Halogen_HTML.th([ Halogen_HTML_Attributes.colSpan(w), Halogen_HTML_Attributes.rowSpan(h) ])([ Halogen_HTML.text(l) ]);
                    };
                };
            };
        }, 
        td: function (_1111) {
            return function (j) {
                return function (w) {
                    return function (h) {
                        return Halogen_HTML.td([ Halogen_HTML_Attributes.colSpan(w), Halogen_HTML_Attributes.rowSpan(h) ])([ Halogen_HTML.text(renderJsonSimple(j)) ]);
                    };
                };
            };
        }
    };
    var inOrdering = function (_1113) {
        return function (_1114) {
            return function (_1115) {
                return function (_1116) {
                    return Prelude.EQ.value;
                };
            };
        };
    };
    var jTableOptsDefault = {
        style: noStyle, 
        columnOrdering: inOrdering, 
        insertHeaderCells: false, 
        maxTupleSize: 10
    };
    var bootstrapStyle = (function () {
        var _1522 = {};
        for (var _1523 in noStyle) {
            if (noStyle.hasOwnProperty(_1523)) {
                _1522[_1523] = noStyle[_1523];
            };
        };
        _1522.table = Halogen_HTML.table([ Halogen_HTML_Attributes.class_(Halogen_HTML_Attributes.className("table")) ]);
        return _1522;
    })();
    return {
        bootstrapStyle: bootstrapStyle, 
        noStyle: noStyle, 
        inOrdering: inOrdering, 
        jTableOptsDefault: jTableOptsDefault, 
        renderJTable: renderJTable
    };
})();
var PS = PS || {};
PS.Halogen_HTML_Events_Monad = (function () {
    "use strict";
    var Control_Monad_Aff = PS.Control_Monad_Aff;
    var Control_Monad_ListT = PS.Control_Monad_ListT;
    var Prelude = PS.Prelude;
    var Control_Apply = PS.Control_Apply;
    var Control_Monad_Aff_Class = PS.Control_Monad_Aff_Class;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Eff_Exception = PS.Control_Monad_Eff_Exception;
    var Event = function (x) {
        return x;
    };
    var unEvent = function (_1119) {
        return _1119;
    };
    var runEvent = function (f) {
        return function (s) {
            var handler = function (_1121) {
                if (_1121 instanceof Data_Maybe.Nothing) {
                    return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
                };
                if (_1121 instanceof Data_Maybe.Just) {
                    return Control_Apply["*>"](Control_Monad_Eff.applyEff)(s(_1121.value0.value0))(go(_1121.value0.value1));
                };
                throw new Error("Failed pattern match");
            };
            var go = function (l) {
                return Control_Monad_Aff.runAff(f)(handler)(Control_Monad_ListT.uncons(Control_Monad_Aff.monadAff)(l));
            };
            return Prelude["<<<"](Prelude.semigroupoidArr)(go)(unEvent);
        };
    };
    var functorEvent = new Prelude.Functor(function (f) {
        return function (_1124) {
            return Prelude["<$>"](Control_Monad_ListT.functorListT(Control_Monad_Aff.functorAff))(f)(_1124);
        };
    });
    var applyEvent = new Prelude.Apply(function (_1125) {
        return function (_1126) {
            return Prelude["<*>"](Control_Monad_ListT.applyListT(Control_Monad_Aff.monadAff))(_1125)(_1126);
        };
    }, function () {
        return functorEvent;
    });
    var applicativeEvent = new Prelude.Applicative(function () {
        return applyEvent;
    }, Prelude["<<<"](Prelude.semigroupoidArr)(Event)(Prelude.pure(Control_Monad_ListT.applicativeListT(Control_Monad_Aff.monadAff))));
    var altEvent = new Control_Alt.Alt(function (_1128) {
        return function (_1129) {
            return Control_Alt["<|>"](Control_Monad_ListT.altListT(Control_Monad_Aff.applicativeAff))(_1128)(_1129);
        };
    }, function () {
        return functorEvent;
    });
    var plusEvent = new Control_Plus.Plus(function () {
        return altEvent;
    }, Control_Plus.empty(Control_Monad_ListT.plusListT(Control_Monad_Aff.monadAff)));
    var alternativeEvent = new Control_Alternative.Alternative(function () {
        return plusEvent;
    }, function () {
        return applicativeEvent;
    });
    return {
        Event: Event, 
        runEvent: runEvent, 
        unEvent: unEvent, 
        functorEvent: functorEvent, 
        applyEvent: applyEvent, 
        applicativeEvent: applicativeEvent, 
        altEvent: altEvent, 
        plusEvent: plusEvent, 
        alternativeEvent: alternativeEvent
    };
})();
var PS = PS || {};
PS.Halogen = (function () {
    "use strict";
    var Halogen_Signal = PS.Halogen_Signal;
    var Halogen_Internal_VirtualDOM = PS.Halogen_Internal_VirtualDOM;
    var Halogen_Component = PS.Halogen_Component;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff_Ref = PS.Control_Monad_Eff_Ref;
    var Control_Monad_Eff_Unsafe = PS.Control_Monad_Eff_Unsafe;
    var Halogen_HTML_Events_Monad = PS.Halogen_HTML_Events_Monad;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Monad_Eff_Exception = PS.Control_Monad_Eff_Exception;
    var Halogen_HTML_Renderer_VirtualDOM = PS.Halogen_HTML_Renderer_VirtualDOM;
    var DOM = PS.DOM;
    var Data_Void = PS.Data_Void;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Data_Bifunctor = PS.Data_Bifunctor;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Halogen_HTML = PS.Halogen_HTML;
    var changes = Halogen_Signal.differencesWith(Halogen_Internal_VirtualDOM.diff);
    var runUI$prime = function (ref) {
        return function (sf) {
            var widgetHandler = Prelude["<$>"](Halogen_Internal_VirtualDOM.functorWidget)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.pure(Halogen_HTML_Events_Monad.applicativeEvent))(Data_Either.Right.create));
            var logger = function (e) {
                return Debug_Trace.trace("Uncaught error in asynchronous code: " + Control_Monad_Eff_Exception.message(e));
            };
            var driver = function (e) {
                return function __do() {
                    var _72 = Control_Monad_Eff_Ref.readRef(ref)();
                    if (_72 instanceof Data_Maybe.Just) {
                        var next = Halogen_Signal.runSF(_72.value0.signal)(e);
                        var _71 = Halogen_Internal_VirtualDOM.patch(Halogen_Signal.head(next))(_72.value0.node)();
                        return Control_Monad_Eff_Ref.writeRef(ref)(new Data_Maybe.Just({
                            signal: Halogen_Signal.tail(next), 
                            node: _71
                        }))();
                    };
                    throw new Error("Failed pattern match");
                };
            };
            var externalDriver = function (req) {
                return driver(new Data_Either.Right(req));
            };
            var requestHandler = function (aff) {
                return Control_Monad_Eff_Unsafe.unsafeInterleaveEff(Halogen_HTML_Events_Monad.runEvent(logger)(driver)(aff));
            };
            var render = Halogen_HTML_Renderer_VirtualDOM.renderHTML(requestHandler)(widgetHandler);
            var vtrees = Prelude["<$>"](Halogen_Signal.functorSF1)(render)(sf);
            var node = Halogen_Internal_VirtualDOM.createElement(Halogen_Signal.head(vtrees));
            var diffs = Prelude[">>>"](Halogen_Signal.semigroupoidSF)(Halogen_Signal.tail(vtrees))(changes(Halogen_Signal.head(vtrees)));
            return function __do() {
                Control_Monad_Eff_Ref.writeRef(ref)(new Data_Maybe.Just({
                    signal: diffs, 
                    node: node
                }))();
                return new Data_Tuple.Tuple(node, externalDriver);
            };
        };
    };
    var runUI = Halogen_Component.runComponent(function (sf) {
        return function __do() {
            var _70 = Control_Monad_Eff_Ref.newRef(Data_Maybe.Nothing.value)();
            return runUI$prime(_70)(sf)();
        };
    });
    return {
        runUI: runUI, 
        changes: changes
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Json_JTable = PS.Data_Json_JTable;
    var Data_Argonaut_Parser = PS.Data_Argonaut_Parser;
    var Halogen_HTML = PS.Halogen_HTML;
    var Halogen_HTML_Attributes = PS.Halogen_HTML_Attributes;
    var Halogen_HTML_Events_Forms = PS.Halogen_HTML_Events_Forms;
    var Halogen_HTML_Events = PS.Halogen_HTML_Events;
    var Data_StrMap = PS.Data_StrMap;
    var Data_Either = PS.Data_Either;
    var Data_Bifunctor = PS.Data_Bifunctor;
    var Data_Void = PS.Data_Void;
    var Halogen_Component = PS.Halogen_Component;
    var Halogen_Signal = PS.Halogen_Signal;
    var Halogen = PS.Halogen;
    var Data_Tuple = PS.Data_Tuple;
    var Control_Bind = PS.Control_Bind;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Alternative = PS.Control_Alternative;
    var DOM = PS.DOM;
    var Data_Argonaut_Core = PS.Data_Argonaut_Core;
    var Data_Foreign_Class = PS.Data_Foreign_Class;
    var Halogen_HTML_Events_Monad = PS.Halogen_HTML_Events_Monad;
    function appendToBody(node) {  return function() {    document.body.appendChild(node);  };};
    var ui = function (__dict_Alternative_1056) {
        var render = function (json) {
            var table = Prelude["<$>"](Data_Either.functorEither)(Data_Json_JTable.renderJTable((function () {
                var _1541 = {};
                for (var _1542 in Data_Json_JTable.jTableOptsDefault) {
                    if (Data_Json_JTable.jTableOptsDefault.hasOwnProperty(_1542)) {
                        _1541[_1542] = Data_Json_JTable.jTableOptsDefault[_1542];
                    };
                };
                _1541.style = Data_Json_JTable.bootstrapStyle;
                return _1541;
            })()))(Data_Argonaut_Parser.jsonParser(json));
            return Halogen_HTML.div([ Halogen_HTML_Attributes.class_(Halogen_HTML_Attributes.className("container")) ])([ Halogen_HTML.h1_([ Halogen_HTML.text("purescript-jtable demo") ]), Halogen_HTML.p_([ Halogen_HTML.text("Paste some JSON:") ]), Halogen_HTML.p_([ Halogen_HTML.textarea([ Halogen_HTML_Attributes.class_(Halogen_HTML_Attributes.className("form-control")), Halogen_HTML_Attributes.value(json), Halogen_HTML_Events_Forms.onInput(__dict_Alternative_1056)(Data_Foreign_Class.stringIsForeign)(Halogen_HTML_Events.input(__dict_Alternative_1056["__superclass_Prelude.Applicative_0"]())(Prelude.id(Prelude.categoryArr))), Halogen_HTML_Attributes.style(Halogen_HTML_Attributes.styles(Data_StrMap.fromList([ new Data_Tuple.Tuple("font-family", "monospace"), new Data_Tuple.Tuple("height", "200px") ]))) ])([  ]) ]), Halogen_HTML.h2_([ Halogen_HTML.text("Output") ]), Data_Either.either(Halogen_HTML.text)(Data_Bifunctor.bimap(Halogen_HTML.bifunctorHTML)(Data_Void.absurd)(Data_Void.absurd))(table) ]);
        };
        return Halogen_Component.component(((__dict_Alternative_1056["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["<$>"](Halogen_Signal.functorSF1)(render)(Halogen_Signal.startingAt(Halogen_Signal.input)("")));
    };
    var main = function __do() {
        var _74 = Halogen.runUI(ui(Halogen_HTML_Events_Monad.alternativeEvent))();
        return appendToBody(_74.value0)();
    };
    return {
        main: main, 
        ui: ui, 
        appendToBody: appendToBody
    };
})();
PS.Main.main();


},{"virtual-dom/create-element":3,"virtual-dom/diff":4,"virtual-dom/patch":8,"virtual-dom/vnode/vnode":22,"virtual-dom/vnode/vtext":24}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
var createElement = require("./vdom/create-element.js")

module.exports = createElement

},{"./vdom/create-element.js":10}],4:[function(require,module,exports){
var diff = require("./vtree/diff.js")

module.exports = diff

},{"./vtree/diff.js":26}],5:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":2}],6:[function(require,module,exports){
"use strict";

module.exports = function isObject(x) {
	return typeof x === "object" && x !== null;
};

},{}],7:[function(require,module,exports){
var nativeIsArray = Array.isArray
var toString = Object.prototype.toString

module.exports = nativeIsArray || isArray

function isArray(obj) {
    return toString.call(obj) === "[object Array]"
}

},{}],8:[function(require,module,exports){
var patch = require("./vdom/patch.js")

module.exports = patch

},{"./vdom/patch.js":13}],9:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook.js")

module.exports = applyProperties

function applyProperties(node, props, previous) {
    for (var propName in props) {
        var propValue = props[propName]

        if (propValue === undefined) {
            removeProperty(node, propName, propValue, previous);
        } else if (isHook(propValue)) {
            removeProperty(node, propName, propValue, previous)
            if (propValue.hook) {
                propValue.hook(node,
                    propName,
                    previous ? previous[propName] : undefined)
            }
        } else {
            if (isObject(propValue)) {
                patchObject(node, props, previous, propName, propValue);
            } else {
                node[propName] = propValue
            }
        }
    }
}

function removeProperty(node, propName, propValue, previous) {
    if (previous) {
        var previousValue = previous[propName]

        if (!isHook(previousValue)) {
            if (propName === "attributes") {
                for (var attrName in previousValue) {
                    node.removeAttribute(attrName)
                }
            } else if (propName === "style") {
                for (var i in previousValue) {
                    node.style[i] = ""
                }
            } else if (typeof previousValue === "string") {
                node[propName] = ""
            } else {
                node[propName] = null
            }
        } else if (previousValue.unhook) {
            previousValue.unhook(node, propName, propValue)
        }
    }
}

function patchObject(node, props, previous, propName, propValue) {
    var previousValue = previous ? previous[propName] : undefined

    // Set attributes
    if (propName === "attributes") {
        for (var attrName in propValue) {
            var attrValue = propValue[attrName]

            if (attrValue === undefined) {
                node.removeAttribute(attrName)
            } else {
                node.setAttribute(attrName, attrValue)
            }
        }

        return
    }

    if(previousValue && isObject(previousValue) &&
        getPrototype(previousValue) !== getPrototype(propValue)) {
        node[propName] = propValue
        return
    }

    if (!isObject(node[propName])) {
        node[propName] = {}
    }

    var replacer = propName === "style" ? "" : undefined

    for (var k in propValue) {
        var value = propValue[k]
        node[propName][k] = (value === undefined) ? replacer : value
    }
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

},{"../vnode/is-vhook.js":17,"is-object":6}],10:[function(require,module,exports){
var document = require("global/document")

var applyProperties = require("./apply-properties")

var isVNode = require("../vnode/is-vnode.js")
var isVText = require("../vnode/is-vtext.js")
var isWidget = require("../vnode/is-widget.js")
var handleThunk = require("../vnode/handle-thunk.js")

module.exports = createElement

function createElement(vnode, opts) {
    var doc = opts ? opts.document || document : document
    var warn = opts ? opts.warn : null

    vnode = handleThunk(vnode).a

    if (isWidget(vnode)) {
        return vnode.init()
    } else if (isVText(vnode)) {
        return doc.createTextNode(vnode.text)
    } else if (!isVNode(vnode)) {
        if (warn) {
            warn("Item is not a valid virtual dom node", vnode)
        }
        return null
    }

    var node = (vnode.namespace === null) ?
        doc.createElement(vnode.tagName) :
        doc.createElementNS(vnode.namespace, vnode.tagName)

    var props = vnode.properties
    applyProperties(node, props)

    var children = vnode.children

    for (var i = 0; i < children.length; i++) {
        var childNode = createElement(children[i], opts)
        if (childNode) {
            node.appendChild(childNode)
        }
    }

    return node
}

},{"../vnode/handle-thunk.js":15,"../vnode/is-vnode.js":18,"../vnode/is-vtext.js":19,"../vnode/is-widget.js":20,"./apply-properties":9,"global/document":5}],11:[function(require,module,exports){
// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
// We don't want to read all of the DOM nodes in the tree so we use
// the in-order tree indexing to eliminate recursion down certain branches.
// We only recurse into a DOM node if we know that it contains a child of
// interest.

var noChild = {}

module.exports = domIndex

function domIndex(rootNode, tree, indices, nodes) {
    if (!indices || indices.length === 0) {
        return {}
    } else {
        indices.sort(ascending)
        return recurse(rootNode, tree, indices, nodes, 0)
    }
}

function recurse(rootNode, tree, indices, nodes, rootIndex) {
    nodes = nodes || {}


    if (rootNode) {
        if (indexInRange(indices, rootIndex, rootIndex)) {
            nodes[rootIndex] = rootNode
        }

        var vChildren = tree.children

        if (vChildren) {

            var childNodes = rootNode.childNodes

            for (var i = 0; i < tree.children.length; i++) {
                rootIndex += 1

                var vChild = vChildren[i] || noChild
                var nextIndex = rootIndex + (vChild.count || 0)

                // skip recursion down the tree if there are no nodes down here
                if (indexInRange(indices, rootIndex, nextIndex)) {
                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
                }

                rootIndex = nextIndex
            }
        }
    }

    return nodes
}

// Binary search for an index in the interval [left, right]
function indexInRange(indices, left, right) {
    if (indices.length === 0) {
        return false
    }

    var minIndex = 0
    var maxIndex = indices.length - 1
    var currentIndex
    var currentItem

    while (minIndex <= maxIndex) {
        currentIndex = ((maxIndex + minIndex) / 2) >> 0
        currentItem = indices[currentIndex]

        if (minIndex === maxIndex) {
            return currentItem >= left && currentItem <= right
        } else if (currentItem < left) {
            minIndex = currentIndex + 1
        } else  if (currentItem > right) {
            maxIndex = currentIndex - 1
        } else {
            return true
        }
    }

    return false;
}

function ascending(a, b) {
    return a > b ? 1 : -1
}

},{}],12:[function(require,module,exports){
var applyProperties = require("./apply-properties")

var isWidget = require("../vnode/is-widget.js")
var VPatch = require("../vnode/vpatch.js")

var render = require("./create-element")
var updateWidget = require("./update-widget")

module.exports = applyPatch

function applyPatch(vpatch, domNode, renderOptions) {
    var type = vpatch.type
    var vNode = vpatch.vNode
    var patch = vpatch.patch

    switch (type) {
        case VPatch.REMOVE:
            return removeNode(domNode, vNode)
        case VPatch.INSERT:
            return insertNode(domNode, patch, renderOptions)
        case VPatch.VTEXT:
            return stringPatch(domNode, vNode, patch, renderOptions)
        case VPatch.WIDGET:
            return widgetPatch(domNode, vNode, patch, renderOptions)
        case VPatch.VNODE:
            return vNodePatch(domNode, vNode, patch, renderOptions)
        case VPatch.ORDER:
            reorderChildren(domNode, patch)
            return domNode
        case VPatch.PROPS:
            applyProperties(domNode, patch, vNode.properties)
            return domNode
        case VPatch.THUNK:
            return replaceRoot(domNode,
                renderOptions.patch(domNode, patch, renderOptions))
        default:
            return domNode
    }
}

function removeNode(domNode, vNode) {
    var parentNode = domNode.parentNode

    if (parentNode) {
        parentNode.removeChild(domNode)
    }

    destroyWidget(domNode, vNode);

    return null
}

function insertNode(parentNode, vNode, renderOptions) {
    var newNode = render(vNode, renderOptions)

    if (parentNode) {
        parentNode.appendChild(newNode)
    }

    return parentNode
}

function stringPatch(domNode, leftVNode, vText, renderOptions) {
    var newNode

    if (domNode.nodeType === 3) {
        domNode.replaceData(0, domNode.length, vText.text)
        newNode = domNode
    } else {
        var parentNode = domNode.parentNode
        newNode = render(vText, renderOptions)

        if (parentNode) {
            parentNode.replaceChild(newNode, domNode)
        }
    }

    return newNode
}

function widgetPatch(domNode, leftVNode, widget, renderOptions) {
    var updating = updateWidget(leftVNode, widget)
    var newNode

    if (updating) {
        newNode = widget.update(leftVNode, domNode) || domNode
    } else {
        newNode = render(widget, renderOptions)
    }

    var parentNode = domNode.parentNode

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    if (!updating) {
        destroyWidget(domNode, leftVNode)
    }

    return newNode
}

function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
    var parentNode = domNode.parentNode
    var newNode = render(vNode, renderOptions)

    if (parentNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    return newNode
}

function destroyWidget(domNode, w) {
    if (typeof w.destroy === "function" && isWidget(w)) {
        w.destroy(domNode)
    }
}

function reorderChildren(domNode, bIndex) {
    var children = []
    var childNodes = domNode.childNodes
    var len = childNodes.length
    var i
    var reverseIndex = bIndex.reverse

    for (i = 0; i < len; i++) {
        children.push(domNode.childNodes[i])
    }

    var insertOffset = 0
    var move
    var node
    var insertNode
    var chainLength
    var insertedLength
    var nextSibling
    for (i = 0; i < len;) {
        move = bIndex[i]
        chainLength = 1
        if (move !== undefined && move !== i) {
            // try to bring forward as long of a chain as possible
            while (bIndex[i + chainLength] === move + chainLength) {
                chainLength++;
            }

            // the element currently at this index will be moved later so increase the insert offset
            if (reverseIndex[i] > i + chainLength) {
                insertOffset++
            }

            node = children[move]
            insertNode = childNodes[i + insertOffset] || null
            insertedLength = 0
            while (node !== insertNode && insertedLength++ < chainLength) {
                domNode.insertBefore(node, insertNode);
                node = children[move + insertedLength];
            }

            // the moved element came from the front of the array so reduce the insert offset
            if (move + chainLength < i) {
                insertOffset--
            }
        }

        // element at this index is scheduled to be removed so increase insert offset
        if (i in bIndex.removes) {
            insertOffset++
        }

        i += chainLength
    }
}

function replaceRoot(oldRoot, newRoot) {
    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
        console.log(oldRoot)
        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
    }

    return newRoot;
}

},{"../vnode/is-widget.js":20,"../vnode/vpatch.js":23,"./apply-properties":9,"./create-element":10,"./update-widget":14}],13:[function(require,module,exports){
var document = require("global/document")
var isArray = require("x-is-array")

var domIndex = require("./dom-index")
var patchOp = require("./patch-op")
module.exports = patch

function patch(rootNode, patches) {
    return patchRecursive(rootNode, patches)
}

function patchRecursive(rootNode, patches, renderOptions) {
    var indices = patchIndices(patches)

    if (indices.length === 0) {
        return rootNode
    }

    var index = domIndex(rootNode, patches.a, indices)
    var ownerDocument = rootNode.ownerDocument

    if (!renderOptions) {
        renderOptions = { patch: patchRecursive }
        if (ownerDocument !== document) {
            renderOptions.document = ownerDocument
        }
    }

    for (var i = 0; i < indices.length; i++) {
        var nodeIndex = indices[i]
        rootNode = applyPatch(rootNode,
            index[nodeIndex],
            patches[nodeIndex],
            renderOptions)
    }

    return rootNode
}

function applyPatch(rootNode, domNode, patchList, renderOptions) {
    if (!domNode) {
        return rootNode
    }

    var newNode

    if (isArray(patchList)) {
        for (var i = 0; i < patchList.length; i++) {
            newNode = patchOp(patchList[i], domNode, renderOptions)

            if (domNode === rootNode) {
                rootNode = newNode
            }
        }
    } else {
        newNode = patchOp(patchList, domNode, renderOptions)

        if (domNode === rootNode) {
            rootNode = newNode
        }
    }

    return rootNode
}

function patchIndices(patches) {
    var indices = []

    for (var key in patches) {
        if (key !== "a") {
            indices.push(Number(key))
        }
    }

    return indices
}

},{"./dom-index":11,"./patch-op":12,"global/document":5,"x-is-array":7}],14:[function(require,module,exports){
var isWidget = require("../vnode/is-widget.js")

module.exports = updateWidget

function updateWidget(a, b) {
    if (isWidget(a) && isWidget(b)) {
        if ("name" in a && "name" in b) {
            return a.id === b.id
        } else {
            return a.init === b.init
        }
    }

    return false
}

},{"../vnode/is-widget.js":20}],15:[function(require,module,exports){
var isVNode = require("./is-vnode")
var isVText = require("./is-vtext")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")

module.exports = handleThunk

function handleThunk(a, b) {
    var renderedA = a
    var renderedB = b

    if (isThunk(b)) {
        renderedB = renderThunk(b, a)
    }

    if (isThunk(a)) {
        renderedA = renderThunk(a, null)
    }

    return {
        a: renderedA,
        b: renderedB
    }
}

function renderThunk(thunk, previous) {
    var renderedThunk = thunk.vnode

    if (!renderedThunk) {
        renderedThunk = thunk.vnode = thunk.render(previous)
    }

    if (!(isVNode(renderedThunk) ||
            isVText(renderedThunk) ||
            isWidget(renderedThunk))) {
        throw new Error("thunk did not return a valid node");
    }

    return renderedThunk
}

},{"./is-thunk":16,"./is-vnode":18,"./is-vtext":19,"./is-widget":20}],16:[function(require,module,exports){
module.exports = isThunk

function isThunk(t) {
    return t && t.type === "Thunk"
}

},{}],17:[function(require,module,exports){
module.exports = isHook

function isHook(hook) {
    return hook &&
      (typeof hook.hook === "function" && !hook.hasOwnProperty("hook") ||
       typeof hook.unhook === "function" && !hook.hasOwnProperty("unhook"))
}

},{}],18:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualNode

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version
}

},{"./version":21}],19:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualText

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version
}

},{"./version":21}],20:[function(require,module,exports){
module.exports = isWidget

function isWidget(w) {
    return w && w.type === "Widget"
}

},{}],21:[function(require,module,exports){
module.exports = "1"

},{}],22:[function(require,module,exports){
var version = require("./version")
var isVNode = require("./is-vnode")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")
var isVHook = require("./is-vhook")

module.exports = VirtualNode

var noProperties = {}
var noChildren = []

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName
    this.properties = properties || noProperties
    this.children = children || noChildren
    this.key = key != null ? String(key) : undefined
    this.namespace = (typeof namespace === "string") ? namespace : null

    var count = (children && children.length) || 0
    var descendants = 0
    var hasWidgets = false
    var hasThunks = false
    var descendantHooks = false
    var hooks

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName]
            if (isVHook(property) && property.unhook) {
                if (!hooks) {
                    hooks = {}
                }

                hooks[propName] = property
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i]
        if (isVNode(child)) {
            descendants += child.count || 0

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true
            }

            if (!hasThunks && child.hasThunks) {
                hasThunks = true
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true
            }
        } else if (!hasWidgets && isWidget(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true
            }
        } else if (!hasThunks && isThunk(child)) {
            hasThunks = true;
        }
    }

    this.count = count + descendants
    this.hasWidgets = hasWidgets
    this.hasThunks = hasThunks
    this.hooks = hooks
    this.descendantHooks = descendantHooks
}

VirtualNode.prototype.version = version
VirtualNode.prototype.type = "VirtualNode"

},{"./is-thunk":16,"./is-vhook":17,"./is-vnode":18,"./is-widget":20,"./version":21}],23:[function(require,module,exports){
var version = require("./version")

VirtualPatch.NONE = 0
VirtualPatch.VTEXT = 1
VirtualPatch.VNODE = 2
VirtualPatch.WIDGET = 3
VirtualPatch.PROPS = 4
VirtualPatch.ORDER = 5
VirtualPatch.INSERT = 6
VirtualPatch.REMOVE = 7
VirtualPatch.THUNK = 8

module.exports = VirtualPatch

function VirtualPatch(type, vNode, patch) {
    this.type = Number(type)
    this.vNode = vNode
    this.patch = patch
}

VirtualPatch.prototype.version = version
VirtualPatch.prototype.type = "VirtualPatch"

},{"./version":21}],24:[function(require,module,exports){
var version = require("./version")

module.exports = VirtualText

function VirtualText(text) {
    this.text = String(text)
}

VirtualText.prototype.version = version
VirtualText.prototype.type = "VirtualText"

},{"./version":21}],25:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook")

module.exports = diffProps

function diffProps(a, b) {
    var diff

    for (var aKey in a) {
        if (!(aKey in b)) {
            diff = diff || {}
            diff[aKey] = undefined
        }

        var aValue = a[aKey]
        var bValue = b[aKey]

        if (aValue === bValue) {
            continue
        } else if (isObject(aValue) && isObject(bValue)) {
            if (getPrototype(bValue) !== getPrototype(aValue)) {
                diff = diff || {}
                diff[aKey] = bValue
            } else if (isHook(bValue)) {
                 diff = diff || {}
                 diff[aKey] = bValue
            } else {
                var objectDiff = diffProps(aValue, bValue)
                if (objectDiff) {
                    diff = diff || {}
                    diff[aKey] = objectDiff
                }
            }
        } else {
            diff = diff || {}
            diff[aKey] = bValue
        }
    }

    for (var bKey in b) {
        if (!(bKey in a)) {
            diff = diff || {}
            diff[bKey] = b[bKey]
        }
    }

    return diff
}

function getPrototype(value) {
  if (Object.getPrototypeOf) {
    return Object.getPrototypeOf(value)
  } else if (value.__proto__) {
    return value.__proto__
  } else if (value.constructor) {
    return value.constructor.prototype
  }
}

},{"../vnode/is-vhook":17,"is-object":6}],26:[function(require,module,exports){
var isArray = require("x-is-array")

var VPatch = require("../vnode/vpatch")
var isVNode = require("../vnode/is-vnode")
var isVText = require("../vnode/is-vtext")
var isWidget = require("../vnode/is-widget")
var isThunk = require("../vnode/is-thunk")
var handleThunk = require("../vnode/handle-thunk")

var diffProps = require("./diff-props")

module.exports = diff

function diff(a, b) {
    var patch = { a: a }
    walk(a, b, patch, 0)
    return patch
}

function walk(a, b, patch, index) {
    if (a === b) {
        return
    }

    var apply = patch[index]
    var applyClear = false

    if (isThunk(a) || isThunk(b)) {
        thunks(a, b, patch, index)
    } else if (b == null) {

        // If a is a widget we will add a remove patch for it
        // Otherwise any child widgets/hooks must be destroyed.
        // This prevents adding two remove patches for a widget.
        if (!isWidget(a)) {
            clearState(a, patch, index)
            apply = patch[index]
        }

        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
    } else if (isVNode(b)) {
        if (isVNode(a)) {
            if (a.tagName === b.tagName &&
                a.namespace === b.namespace &&
                a.key === b.key) {
                var propsPatch = diffProps(a.properties, b.properties)
                if (propsPatch) {
                    apply = appendPatch(apply,
                        new VPatch(VPatch.PROPS, a, propsPatch))
                }
                apply = diffChildren(a, b, patch, apply, index)
            } else {
                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
                applyClear = true
            }
        } else {
            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
            applyClear = true
        }
    } else if (isVText(b)) {
        if (!isVText(a)) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
            applyClear = true
        } else if (a.text !== b.text) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
        }
    } else if (isWidget(b)) {
        if (!isWidget(a)) {
            applyClear = true;
        }

        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))
    }

    if (apply) {
        patch[index] = apply
    }

    if (applyClear) {
        clearState(a, patch, index)
    }
}

function diffChildren(a, b, patch, apply, index) {
    var aChildren = a.children
    var bChildren = reorder(aChildren, b.children)

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen

    for (var i = 0; i < len; i++) {
        var leftNode = aChildren[i]
        var rightNode = bChildren[i]
        index += 1

        if (!leftNode) {
            if (rightNode) {
                // Excess nodes in b need to be added
                apply = appendPatch(apply,
                    new VPatch(VPatch.INSERT, null, rightNode))
            }
        } else {
            walk(leftNode, rightNode, patch, index)
        }

        if (isVNode(leftNode) && leftNode.count) {
            index += leftNode.count
        }
    }

    if (bChildren.moves) {
        // Reorder nodes last
        apply = appendPatch(apply, new VPatch(VPatch.ORDER, a, bChildren.moves))
    }

    return apply
}

function clearState(vNode, patch, index) {
    // TODO: Make this a single walk, not two
    unhook(vNode, patch, index)
    destroyWidgets(vNode, patch, index)
}

// Patch records for all destroyed widgets must be added because we need
// a DOM node reference for the destroy function
function destroyWidgets(vNode, patch, index) {
    if (isWidget(vNode)) {
        if (typeof vNode.destroy === "function") {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(VPatch.REMOVE, vNode, null)
            )
        }
    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
        var children = vNode.children
        var len = children.length
        for (var i = 0; i < len; i++) {
            var child = children[i]
            index += 1

            destroyWidgets(child, patch, index)

            if (isVNode(child) && child.count) {
                index += child.count
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

// Create a sub-patch for thunks
function thunks(a, b, patch, index) {
    var nodes = handleThunk(a, b);
    var thunkPatch = diff(nodes.a, nodes.b)
    if (hasPatches(thunkPatch)) {
        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
    }
}

function hasPatches(patch) {
    for (var index in patch) {
        if (index !== "a") {
            return true;
        }
    }

    return false;
}

// Execute hooks when two nodes are identical
function unhook(vNode, patch, index) {
    if (isVNode(vNode)) {
        if (vNode.hooks) {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(
                    VPatch.PROPS,
                    vNode,
                    undefinedKeys(vNode.hooks)
                )
            )
        }

        if (vNode.descendantHooks || vNode.hasThunks) {
            var children = vNode.children
            var len = children.length
            for (var i = 0; i < len; i++) {
                var child = children[i]
                index += 1

                unhook(child, patch, index)

                if (isVNode(child) && child.count) {
                    index += child.count
                }
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

function undefinedKeys(obj) {
    var result = {}

    for (var key in obj) {
        result[key] = undefined
    }

    return result
}

// List diff, naive left to right reordering
function reorder(aChildren, bChildren) {

    var bKeys = keyIndex(bChildren)

    if (!bKeys) {
        return bChildren
    }

    var aKeys = keyIndex(aChildren)

    if (!aKeys) {
        return bChildren
    }

    var bMatch = {}, aMatch = {}

    for (var aKey in bKeys) {
        bMatch[bKeys[aKey]] = aKeys[aKey]
    }

    for (var bKey in aKeys) {
        aMatch[aKeys[bKey]] = bKeys[bKey]
    }

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen
    var shuffle = []
    var freeIndex = 0
    var i = 0
    var moveIndex = 0
    var moves = {}
    var removes = moves.removes = {}
    var reverse = moves.reverse = {}
    var hasMoves = false

    while (freeIndex < len) {
        var move = aMatch[i]
        if (move !== undefined) {
            shuffle[i] = bChildren[move]
            if (move !== moveIndex) {
                moves[move] = moveIndex
                reverse[moveIndex] = move
                hasMoves = true
            }
            moveIndex++
        } else if (i in aMatch) {
            shuffle[i] = undefined
            removes[i] = moveIndex++
            hasMoves = true
        } else {
            while (bMatch[freeIndex] !== undefined) {
                freeIndex++
            }

            if (freeIndex < len) {
                var freeChild = bChildren[freeIndex]
                if (freeChild) {
                    shuffle[i] = freeChild
                    if (freeIndex !== moveIndex) {
                        hasMoves = true
                        moves[freeIndex] = moveIndex
                        reverse[moveIndex] = freeIndex
                    }
                    moveIndex++
                }
                freeIndex++
            }
        }
        i++
    }

    if (hasMoves) {
        shuffle.moves = moves
    }

    return shuffle
}

function keyIndex(children) {
    var i, keys

    for (i = 0; i < children.length; i++) {
        var child = children[i]

        if (child.key !== undefined) {
            keys = keys || {}
            keys[child.key] = i
        }
    }

    return keys
}

function appendPatch(apply, patch) {
    if (apply) {
        if (isArray(apply)) {
            apply.push(patch)
        } else {
            apply = [apply, patch]
        }

        return apply
    } else {
        return patch
    }
}

},{"../vnode/handle-thunk":15,"../vnode/is-thunk":16,"../vnode/is-vnode":18,"../vnode/is-vtext":19,"../vnode/is-widget":20,"../vnode/vpatch":23,"./diff-props":25,"x-is-array":7}]},{},[1])